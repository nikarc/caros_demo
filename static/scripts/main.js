!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){module.exports.BinarySearchTree=require("./lib/bst"),module.exports.AVLTree=require("./lib/avltree")},{"./lib/avltree":2,"./lib/bst":3}],2:[function(require,module,exports){function AVLTree(options){this.tree=new _AVLTree(options)}function _AVLTree(options){options=options||{},this.left=null,this.right=null,this.parent=void 0!==options.parent?options.parent:null,options.hasOwnProperty("key")&&(this.key=options.key),this.data=options.hasOwnProperty("value")?[options.value]:[],this.unique=options.unique||!1,this.compareKeys=options.compareKeys||customUtils.defaultCompareKeysFunction,this.checkValueEquality=options.checkValueEquality||customUtils.defaultCheckValueEquality}var BinarySearchTree=require("./bst"),customUtils=require("./customUtils"),util=require("util");require("underscore");util.inherits(_AVLTree,BinarySearchTree),AVLTree._AVLTree=_AVLTree,_AVLTree.prototype.checkHeightCorrect=function(){var leftH,rightH;if(this.hasOwnProperty("key")){if(this.left&&void 0===this.left.height)throw"Undefined height for node "+this.left.key;if(this.right&&void 0===this.right.height)throw"Undefined height for node "+this.right.key;if(void 0===this.height)throw"Undefined height for node "+this.key;if(leftH=this.left?this.left.height:0,rightH=this.right?this.right.height:0,this.height!==1+Math.max(leftH,rightH))throw"Height constraint failed for node "+this.key;this.left&&this.left.checkHeightCorrect(),this.right&&this.right.checkHeightCorrect()}},_AVLTree.prototype.balanceFactor=function(){var leftH=this.left?this.left.height:0,rightH=this.right?this.right.height:0;return leftH-rightH},_AVLTree.prototype.checkBalanceFactors=function(){if(Math.abs(this.balanceFactor())>1)throw"Tree is unbalanced at node "+this.key;this.left&&this.left.checkBalanceFactors(),this.right&&this.right.checkBalanceFactors()},_AVLTree.prototype.checkIsAVLT=function(){_AVLTree.super_.prototype.checkIsBST.call(this),this.checkHeightCorrect(),this.checkBalanceFactors()},AVLTree.prototype.checkIsAVLT=function(){this.tree.checkIsAVLT()},_AVLTree.prototype.rightRotation=function(){var b,ah,bh,ch,q=this,p=this.left;return p?(b=p.right,q.parent?(p.parent=q.parent,q.parent.left===q?q.parent.left=p:q.parent.right=p):p.parent=null,p.right=q,q.parent=p,q.left=b,b&&(b.parent=q),ah=p.left?p.left.height:0,bh=b?b.height:0,ch=q.right?q.right.height:0,q.height=Math.max(bh,ch)+1,p.height=Math.max(ah,q.height)+1,p):this},_AVLTree.prototype.leftRotation=function(){var b,ah,bh,ch,p=this,q=this.right;return q?(b=q.left,p.parent?(q.parent=p.parent,p.parent.left===p?p.parent.left=q:p.parent.right=q):q.parent=null,q.left=p,p.parent=q,p.right=b,b&&(b.parent=p),ah=p.left?p.left.height:0,bh=b?b.height:0,ch=q.right?q.right.height:0,p.height=Math.max(ah,bh)+1,q.height=Math.max(ch,p.height)+1,q):this},_AVLTree.prototype.rightTooSmall=function(){return this.balanceFactor()<=1?this:(this.left.balanceFactor()<0&&this.left.leftRotation(),this.rightRotation())},_AVLTree.prototype.leftTooSmall=function(){return this.balanceFactor()>=-1?this:(this.right.balanceFactor()>0&&this.right.rightRotation(),this.leftRotation())},_AVLTree.prototype.rebalanceAlongPath=function(path){var rotated,i,newRoot=this;if(!this.hasOwnProperty("key"))return delete this.height,this;for(i=path.length-1;i>=0;i-=1)path[i].height=1+Math.max(path[i].left?path[i].left.height:0,path[i].right?path[i].right.height:0),path[i].balanceFactor()>1&&(rotated=path[i].rightTooSmall(),0===i&&(newRoot=rotated)),path[i].balanceFactor()<-1&&(rotated=path[i].leftTooSmall(),0===i&&(newRoot=rotated));return newRoot},_AVLTree.prototype.insert=function(key,value){var insertPath=[],currentNode=this;if(!this.hasOwnProperty("key"))return this.key=key,this.data.push(value),this.height=1,this;for(;;){if(0===currentNode.compareKeys(currentNode.key,key)){if(currentNode.unique)throw{message:"Can't insert key "+key+", it violates the unique constraint",key:key,errorType:"uniqueViolated"};return currentNode.data.push(value),this}if(insertPath.push(currentNode),currentNode.compareKeys(key,currentNode.key)<0){if(!currentNode.left){insertPath.push(currentNode.createLeftChild({key:key,value:value}));break}currentNode=currentNode.left}else{if(!currentNode.right){insertPath.push(currentNode.createRightChild({key:key,value:value}));break}currentNode=currentNode.right}}return this.rebalanceAlongPath(insertPath)},AVLTree.prototype.insert=function(key,value){var newTree=this.tree.insert(key,value);newTree&&(this.tree=newTree)},_AVLTree.prototype["delete"]=function(key,value){var replaceWith,newData=[],currentNode=this,deletePath=[];if(!this.hasOwnProperty("key"))return this;for(;;){if(0===currentNode.compareKeys(key,currentNode.key))break;if(deletePath.push(currentNode),currentNode.compareKeys(key,currentNode.key)<0){if(!currentNode.left)return this;currentNode=currentNode.left}else{if(!currentNode.right)return this;currentNode=currentNode.right}}if(currentNode.data.length>1&&value)return currentNode.data.forEach(function(d){currentNode.checkValueEquality(d,value)||newData.push(d)}),currentNode.data=newData,this;if(!currentNode.left&&!currentNode.right)return currentNode===this?(delete currentNode.key,currentNode.data=[],delete currentNode.height,this):(currentNode.parent.left===currentNode?currentNode.parent.left=null:currentNode.parent.right=null,this.rebalanceAlongPath(deletePath));if(!currentNode.left||!currentNode.right)return replaceWith=currentNode.left?currentNode.left:currentNode.right,currentNode===this?(replaceWith.parent=null,replaceWith):(currentNode.parent.left===currentNode?(currentNode.parent.left=replaceWith,replaceWith.parent=currentNode.parent):(currentNode.parent.right=replaceWith,replaceWith.parent=currentNode.parent),this.rebalanceAlongPath(deletePath));if(deletePath.push(currentNode),replaceWith=currentNode.left,!replaceWith.right)return currentNode.key=replaceWith.key,currentNode.data=replaceWith.data,currentNode.left=replaceWith.left,replaceWith.left&&(replaceWith.left.parent=currentNode),this.rebalanceAlongPath(deletePath);for(;;){if(!replaceWith.right)break;deletePath.push(replaceWith),replaceWith=replaceWith.right}return currentNode.key=replaceWith.key,currentNode.data=replaceWith.data,replaceWith.parent.right=replaceWith.left,replaceWith.left&&(replaceWith.left.parent=replaceWith.parent),this.rebalanceAlongPath(deletePath)},AVLTree.prototype["delete"]=function(key,value){var newTree=this.tree["delete"](key,value);newTree&&(this.tree=newTree)},["getNumberOfKeys","search","betweenBounds","prettyPrint","executeOnEveryNode"].forEach(function(fn){AVLTree.prototype[fn]=function(){return this.tree[fn].apply(this.tree,arguments)}}),module.exports=AVLTree},{"./bst":3,"./customUtils":4,underscore:5,util:22}],3:[function(require,module,exports){function BinarySearchTree(options){options=options||{},this.left=null,this.right=null,this.parent=void 0!==options.parent?options.parent:null,options.hasOwnProperty("key")&&(this.key=options.key),this.data=options.hasOwnProperty("value")?[options.value]:[],this.unique=options.unique||!1,this.compareKeys=options.compareKeys||customUtils.defaultCompareKeysFunction,this.checkValueEquality=options.checkValueEquality||customUtils.defaultCheckValueEquality}function append(array,toAppend){var i;for(i=0;i<toAppend.length;i+=1)array.push(toAppend[i])}var customUtils=require("./customUtils");BinarySearchTree.prototype.getMaxKeyDescendant=function(){return this.right?this.right.getMaxKeyDescendant():this},BinarySearchTree.prototype.getMaxKey=function(){return this.getMaxKeyDescendant().key},BinarySearchTree.prototype.getMinKeyDescendant=function(){return this.left?this.left.getMinKeyDescendant():this},BinarySearchTree.prototype.getMinKey=function(){return this.getMinKeyDescendant().key},BinarySearchTree.prototype.checkAllNodesFullfillCondition=function(test){this.hasOwnProperty("key")&&(test(this.key,this.data),this.left&&this.left.checkAllNodesFullfillCondition(test),this.right&&this.right.checkAllNodesFullfillCondition(test))},BinarySearchTree.prototype.checkNodeOrdering=function(){var self=this;this.hasOwnProperty("key")&&(this.left&&(this.left.checkAllNodesFullfillCondition(function(k){if(self.compareKeys(k,self.key)>=0)throw"Tree with root "+self.key+" is not a binary search tree"}),this.left.checkNodeOrdering()),this.right&&(this.right.checkAllNodesFullfillCondition(function(k){if(self.compareKeys(k,self.key)<=0)throw"Tree with root "+self.key+" is not a binary search tree"}),this.right.checkNodeOrdering()))},BinarySearchTree.prototype.checkInternalPointers=function(){if(this.left){if(this.left.parent!==this)throw"Parent pointer broken for key "+this.key;this.left.checkInternalPointers()}if(this.right){if(this.right.parent!==this)throw"Parent pointer broken for key "+this.key;this.right.checkInternalPointers()}},BinarySearchTree.prototype.checkIsBST=function(){if(this.checkNodeOrdering(),this.checkInternalPointers(),this.parent)throw"The root shouldn't have a parent"},BinarySearchTree.prototype.getNumberOfKeys=function(){var res;return this.hasOwnProperty("key")?(res=1,this.left&&(res+=this.left.getNumberOfKeys()),this.right&&(res+=this.right.getNumberOfKeys()),res):0},BinarySearchTree.prototype.createSimilar=function(options){return options=options||{},options.unique=this.unique,options.compareKeys=this.compareKeys,options.checkValueEquality=this.checkValueEquality,new this.constructor(options)},BinarySearchTree.prototype.createLeftChild=function(options){var leftChild=this.createSimilar(options);return leftChild.parent=this,this.left=leftChild,leftChild},BinarySearchTree.prototype.createRightChild=function(options){var rightChild=this.createSimilar(options);return rightChild.parent=this,this.right=rightChild,rightChild},BinarySearchTree.prototype.insert=function(key,value){if(!this.hasOwnProperty("key"))return this.key=key,void this.data.push(value);if(0===this.compareKeys(this.key,key)){if(this.unique)throw{message:"Can't insert key "+key+", it violates the unique constraint",key:key,errorType:"uniqueViolated"};return void this.data.push(value)}this.compareKeys(key,this.key)<0?this.left?this.left.insert(key,value):this.createLeftChild({key:key,value:value}):this.right?this.right.insert(key,value):this.createRightChild({key:key,value:value})},BinarySearchTree.prototype.search=function(key){return this.hasOwnProperty("key")?0===this.compareKeys(this.key,key)?this.data:this.compareKeys(key,this.key)<0?this.left?this.left.search(key):[]:this.right?this.right.search(key):[]:[]},BinarySearchTree.prototype.getLowerBoundMatcher=function(query){var self=this;return query.hasOwnProperty("$gt")||query.hasOwnProperty("$gte")?query.hasOwnProperty("$gt")&&query.hasOwnProperty("$gte")?0===self.compareKeys(query.$gte,query.$gt)?function(key){return self.compareKeys(key,query.$gt)>0}:self.compareKeys(query.$gte,query.$gt)>0?function(key){return self.compareKeys(key,query.$gte)>=0}:function(key){return self.compareKeys(key,query.$gt)>0}:query.hasOwnProperty("$gt")?function(key){return self.compareKeys(key,query.$gt)>0}:function(key){return self.compareKeys(key,query.$gte)>=0}:function(){return!0}},BinarySearchTree.prototype.getUpperBoundMatcher=function(query){var self=this;return query.hasOwnProperty("$lt")||query.hasOwnProperty("$lte")?query.hasOwnProperty("$lt")&&query.hasOwnProperty("$lte")?0===self.compareKeys(query.$lte,query.$lt)?function(key){return self.compareKeys(key,query.$lt)<0}:self.compareKeys(query.$lte,query.$lt)<0?function(key){return self.compareKeys(key,query.$lte)<=0}:function(key){return self.compareKeys(key,query.$lt)<0}:query.hasOwnProperty("$lt")?function(key){return self.compareKeys(key,query.$lt)<0}:function(key){return self.compareKeys(key,query.$lte)<=0}:function(){return!0}},BinarySearchTree.prototype.betweenBounds=function(query,lbm,ubm){var res=[];return this.hasOwnProperty("key")?(lbm=lbm||this.getLowerBoundMatcher(query),ubm=ubm||this.getUpperBoundMatcher(query),lbm(this.key)&&this.left&&append(res,this.left.betweenBounds(query,lbm,ubm)),lbm(this.key)&&ubm(this.key)&&append(res,this.data),ubm(this.key)&&this.right&&append(res,this.right.betweenBounds(query,lbm,ubm)),res):[]},BinarySearchTree.prototype.deleteIfLeaf=function(){return this.left||this.right?!1:this.parent?(this.parent.left===this?this.parent.left=null:this.parent.right=null,!0):(delete this.key,this.data=[],!0)},BinarySearchTree.prototype.deleteIfOnlyOneChild=function(){var child;return this.left&&!this.right&&(child=this.left),!this.left&&this.right&&(child=this.right),child?this.parent?(this.parent.left===this?(this.parent.left=child,child.parent=this.parent):(this.parent.right=child,child.parent=this.parent),!0):(this.key=child.key,this.data=child.data,this.left=null,child.left&&(this.left=child.left,child.left.parent=this),this.right=null,child.right&&(this.right=child.right,child.right.parent=this),!0):!1},BinarySearchTree.prototype["delete"]=function(key,value){var replaceWith,newData=[],self=this;if(this.hasOwnProperty("key")){if(this.compareKeys(key,this.key)<0)return void(this.left&&this.left["delete"](key,value));if(this.compareKeys(key,this.key)>0)return void(this.right&&this.right["delete"](key,value));if(0!==!this.compareKeys(key,this.key))return this.data.length>1&&void 0!==value?(this.data.forEach(function(d){self.checkValueEquality(d,value)||newData.push(d)}),void(self.data=newData)):void(this.deleteIfLeaf()||this.deleteIfOnlyOneChild()||(Math.random()>=.5?(replaceWith=this.left.getMaxKeyDescendant(),this.key=replaceWith.key,this.data=replaceWith.data,this===replaceWith.parent?(this.left=replaceWith.left,replaceWith.left&&(replaceWith.left.parent=replaceWith.parent)):(replaceWith.parent.right=replaceWith.left,replaceWith.left&&(replaceWith.left.parent=replaceWith.parent))):(replaceWith=this.right.getMinKeyDescendant(),this.key=replaceWith.key,this.data=replaceWith.data,this===replaceWith.parent?(this.right=replaceWith.right,replaceWith.right&&(replaceWith.right.parent=replaceWith.parent)):(replaceWith.parent.left=replaceWith.right,replaceWith.right&&(replaceWith.right.parent=replaceWith.parent)))))}},BinarySearchTree.prototype.executeOnEveryNode=function(fn){this.left&&this.left.executeOnEveryNode(fn),fn(this),this.right&&this.right.executeOnEveryNode(fn)},BinarySearchTree.prototype.prettyPrint=function(printData,spacing){spacing=spacing||"",console.log(spacing+"* "+this.key),printData&&console.log(spacing+"* "+this.data),(this.left||this.right)&&(this.left?this.left.prettyPrint(printData,spacing+"  "):console.log(spacing+"  *"),this.right?this.right.prettyPrint(printData,spacing+"  "):console.log(spacing+"  *"))},module.exports=BinarySearchTree},{"./customUtils":4}],4:[function(require,module,exports){function getRandomArray(n){var res,next;return 0===n?[]:1===n?[0]:(res=getRandomArray(n-1),next=Math.floor(Math.random()*n),res.splice(next,0,n-1),res)}function defaultCompareKeysFunction(a,b){if(b>a)return-1;if(a>b)return 1;if(a===b)return 0;throw{message:"Couldn't compare elements",a:a,b:b}}function defaultCheckValueEquality(a,b){return a===b}module.exports.getRandomArray=getRandomArray,module.exports.defaultCompareKeysFunction=defaultCompareKeysFunction,module.exports.defaultCheckValueEquality=defaultCheckValueEquality},{}],5:[function(require,module,exports){(function(){var root=this,previousUnderscore=root._,breaker={},ArrayProto=Array.prototype,ObjProto=Object.prototype,FuncProto=Function.prototype,push=ArrayProto.push,slice=ArrayProto.slice,concat=ArrayProto.concat,toString=ObjProto.toString,hasOwnProperty=ObjProto.hasOwnProperty,nativeForEach=ArrayProto.forEach,nativeMap=ArrayProto.map,nativeReduce=ArrayProto.reduce,nativeReduceRight=ArrayProto.reduceRight,nativeFilter=ArrayProto.filter,nativeEvery=ArrayProto.every,nativeSome=ArrayProto.some,nativeIndexOf=ArrayProto.indexOf,nativeLastIndexOf=ArrayProto.lastIndexOf,nativeIsArray=Array.isArray,nativeKeys=Object.keys,nativeBind=FuncProto.bind,_=function(obj){return obj instanceof _?obj:this instanceof _?void(this._wrapped=obj):new _(obj)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=_),exports._=_):root._=_,_.VERSION="1.4.4";var each=_.each=_.forEach=function(obj,iterator,context){if(null!=obj)if(nativeForEach&&obj.forEach===nativeForEach)obj.forEach(iterator,context);else if(obj.length===+obj.length){for(var i=0,l=obj.length;l>i;i++)if(iterator.call(context,obj[i],i,obj)===breaker)return}else for(var key in obj)if(_.has(obj,key)&&iterator.call(context,obj[key],key,obj)===breaker)return};_.map=_.collect=function(obj,iterator,context){var results=[];return null==obj?results:nativeMap&&obj.map===nativeMap?obj.map(iterator,context):(each(obj,function(value,index,list){results[results.length]=iterator.call(context,value,index,list)}),results)};var reduceError="Reduce of empty array with no initial value";_.reduce=_.foldl=_.inject=function(obj,iterator,memo,context){var initial=arguments.length>2;if(null==obj&&(obj=[]),nativeReduce&&obj.reduce===nativeReduce)return context&&(iterator=_.bind(iterator,context)),initial?obj.reduce(iterator,memo):obj.reduce(iterator);if(each(obj,function(value,index,list){initial?memo=iterator.call(context,memo,value,index,list):(memo=value,initial=!0)}),!initial)throw new TypeError(reduceError);return memo},_.reduceRight=_.foldr=function(obj,iterator,memo,context){var initial=arguments.length>2;if(null==obj&&(obj=[]),nativeReduceRight&&obj.reduceRight===nativeReduceRight)return context&&(iterator=_.bind(iterator,context)),initial?obj.reduceRight(iterator,memo):obj.reduceRight(iterator);var length=obj.length;if(length!==+length){var keys=_.keys(obj);length=keys.length}if(each(obj,function(value,index,list){index=keys?keys[--length]:--length,initial?memo=iterator.call(context,memo,obj[index],index,list):(memo=obj[index],initial=!0)}),!initial)throw new TypeError(reduceError);return memo},_.find=_.detect=function(obj,iterator,context){var result;return any(obj,function(value,index,list){return iterator.call(context,value,index,list)?(result=value,!0):void 0}),result},_.filter=_.select=function(obj,iterator,context){var results=[];return null==obj?results:nativeFilter&&obj.filter===nativeFilter?obj.filter(iterator,context):(each(obj,function(value,index,list){iterator.call(context,value,index,list)&&(results[results.length]=value)}),results)},_.reject=function(obj,iterator,context){return _.filter(obj,function(value,index,list){return!iterator.call(context,value,index,list)},context)},_.every=_.all=function(obj,iterator,context){iterator||(iterator=_.identity);var result=!0;return null==obj?result:nativeEvery&&obj.every===nativeEvery?obj.every(iterator,context):(each(obj,function(value,index,list){return(result=result&&iterator.call(context,value,index,list))?void 0:breaker}),!!result)};var any=_.some=_.any=function(obj,iterator,context){iterator||(iterator=_.identity);var result=!1;return null==obj?result:nativeSome&&obj.some===nativeSome?obj.some(iterator,context):(each(obj,function(value,index,list){return result||(result=iterator.call(context,value,index,list))?breaker:void 0}),!!result)};_.contains=_.include=function(obj,target){return null==obj?!1:nativeIndexOf&&obj.indexOf===nativeIndexOf?-1!=obj.indexOf(target):any(obj,function(value){return value===target})},_.invoke=function(obj,method){var args=slice.call(arguments,2),isFunc=_.isFunction(method);return _.map(obj,function(value){return(isFunc?method:value[method]).apply(value,args)})},_.pluck=function(obj,key){return _.map(obj,function(value){return value[key]})},_.where=function(obj,attrs,first){return _.isEmpty(attrs)?first?null:[]:_[first?"find":"filter"](obj,function(value){for(var key in attrs)if(attrs[key]!==value[key])return!1;return!0})},_.findWhere=function(obj,attrs){return _.where(obj,attrs,!0)},_.max=function(obj,iterator,context){if(!iterator&&_.isArray(obj)&&obj[0]===+obj[0]&&obj.length<65535)return Math.max.apply(Math,obj);if(!iterator&&_.isEmpty(obj))return-(1/0);var result={computed:-(1/0),value:-(1/0)};return each(obj,function(value,index,list){var computed=iterator?iterator.call(context,value,index,list):value;computed>=result.computed&&(result={value:value,computed:computed})}),result.value},_.min=function(obj,iterator,context){if(!iterator&&_.isArray(obj)&&obj[0]===+obj[0]&&obj.length<65535)return Math.min.apply(Math,obj);if(!iterator&&_.isEmpty(obj))return 1/0;var result={computed:1/0,value:1/0};return each(obj,function(value,index,list){var computed=iterator?iterator.call(context,value,index,list):value;computed<result.computed&&(result={value:value,computed:computed})}),result.value},_.shuffle=function(obj){var rand,index=0,shuffled=[];return each(obj,function(value){rand=_.random(index++),shuffled[index-1]=shuffled[rand],shuffled[rand]=value}),shuffled};var lookupIterator=function(value){return _.isFunction(value)?value:function(obj){return obj[value]}};_.sortBy=function(obj,value,context){var iterator=lookupIterator(value);return _.pluck(_.map(obj,function(value,index,list){return{value:value,index:index,criteria:iterator.call(context,value,index,list)}}).sort(function(left,right){var a=left.criteria,b=right.criteria;if(a!==b){if(a>b||void 0===a)return 1;if(b>a||void 0===b)return-1}return left.index<right.index?-1:1}),"value")};var group=function(obj,value,context,behavior){var result={},iterator=lookupIterator(value||_.identity);return each(obj,function(value,index){var key=iterator.call(context,value,index,obj);behavior(result,key,value)}),result};_.groupBy=function(obj,value,context){return group(obj,value,context,function(result,key,value){(_.has(result,key)?result[key]:result[key]=[]).push(value)})},_.countBy=function(obj,value,context){return group(obj,value,context,function(result,key){_.has(result,key)||(result[key]=0),result[key]++})},_.sortedIndex=function(array,obj,iterator,context){iterator=null==iterator?_.identity:lookupIterator(iterator);for(var value=iterator.call(context,obj),low=0,high=array.length;high>low;){var mid=low+high>>>1;iterator.call(context,array[mid])<value?low=mid+1:high=mid}return low},_.toArray=function(obj){return obj?_.isArray(obj)?slice.call(obj):obj.length===+obj.length?_.map(obj,_.identity):_.values(obj):[]},_.size=function(obj){return null==obj?0:obj.length===+obj.length?obj.length:_.keys(obj).length},_.first=_.head=_.take=function(array,n,guard){return null!=array?null==n||guard?array[0]:slice.call(array,0,n):void 0},_.initial=function(array,n,guard){return slice.call(array,0,array.length-(null==n||guard?1:n))},_.last=function(array,n,guard){return null!=array?null==n||guard?array[array.length-1]:slice.call(array,Math.max(array.length-n,0)):void 0},_.rest=_.tail=_.drop=function(array,n,guard){return slice.call(array,null==n||guard?1:n)},_.compact=function(array){return _.filter(array,_.identity)};var flatten=function(input,shallow,output){return each(input,function(value){_.isArray(value)?shallow?push.apply(output,value):flatten(value,shallow,output):output.push(value)}),output};_.flatten=function(array,shallow){return flatten(array,shallow,[])},_.without=function(array){return _.difference(array,slice.call(arguments,1))},_.uniq=_.unique=function(array,isSorted,iterator,context){_.isFunction(isSorted)&&(context=iterator,iterator=isSorted,isSorted=!1);var initial=iterator?_.map(array,iterator,context):array,results=[],seen=[];return each(initial,function(value,index){(isSorted?index&&seen[seen.length-1]===value:_.contains(seen,value))||(seen.push(value),results.push(array[index]))}),results},_.union=function(){return _.uniq(concat.apply(ArrayProto,arguments))},_.intersection=function(array){var rest=slice.call(arguments,1);return _.filter(_.uniq(array),function(item){return _.every(rest,function(other){return _.indexOf(other,item)>=0})})},_.difference=function(array){var rest=concat.apply(ArrayProto,slice.call(arguments,1));return _.filter(array,function(value){return!_.contains(rest,value)})},_.zip=function(){for(var args=slice.call(arguments),length=_.max(_.pluck(args,"length")),results=new Array(length),i=0;length>i;i++)results[i]=_.pluck(args,""+i);return results},_.object=function(list,values){if(null==list)return{};for(var result={},i=0,l=list.length;l>i;i++)values?result[list[i]]=values[i]:result[list[i][0]]=list[i][1];return result},_.indexOf=function(array,item,isSorted){if(null==array)return-1;var i=0,l=array.length;if(isSorted){if("number"!=typeof isSorted)return i=_.sortedIndex(array,item),array[i]===item?i:-1;i=0>isSorted?Math.max(0,l+isSorted):isSorted}if(nativeIndexOf&&array.indexOf===nativeIndexOf)return array.indexOf(item,isSorted);for(;l>i;i++)if(array[i]===item)return i;return-1},_.lastIndexOf=function(array,item,from){if(null==array)return-1;var hasIndex=null!=from;if(nativeLastIndexOf&&array.lastIndexOf===nativeLastIndexOf)return hasIndex?array.lastIndexOf(item,from):array.lastIndexOf(item);for(var i=hasIndex?from:array.length;i--;)if(array[i]===item)return i;return-1},_.range=function(start,stop,step){arguments.length<=1&&(stop=start||0,start=0),step=arguments[2]||1;for(var len=Math.max(Math.ceil((stop-start)/step),0),idx=0,range=new Array(len);len>idx;)range[idx++]=start,start+=step;return range},_.bind=function(func,context){if(func.bind===nativeBind&&nativeBind)return nativeBind.apply(func,slice.call(arguments,1));var args=slice.call(arguments,2);return function(){return func.apply(context,args.concat(slice.call(arguments)))}},_.partial=function(func){var args=slice.call(arguments,1);return function(){return func.apply(this,args.concat(slice.call(arguments)))}},_.bindAll=function(obj){var funcs=slice.call(arguments,1);return 0===funcs.length&&(funcs=_.functions(obj)),each(funcs,function(f){obj[f]=_.bind(obj[f],obj)}),obj},_.memoize=function(func,hasher){var memo={};return hasher||(hasher=_.identity),function(){var key=hasher.apply(this,arguments);return _.has(memo,key)?memo[key]:memo[key]=func.apply(this,arguments)}},_.delay=function(func,wait){var args=slice.call(arguments,2);return setTimeout(function(){return func.apply(null,args)},wait)},_.defer=function(func){return _.delay.apply(_,[func,1].concat(slice.call(arguments,1)))},_.throttle=function(func,wait){var context,args,timeout,result,previous=0,later=function(){previous=new Date,timeout=null,result=func.apply(context,args)};return function(){var now=new Date,remaining=wait-(now-previous);return context=this,args=arguments,0>=remaining?(clearTimeout(timeout),timeout=null,previous=now,result=func.apply(context,args)):timeout||(timeout=setTimeout(later,remaining)),result}},_.debounce=function(func,wait,immediate){var timeout,result;return function(){var context=this,args=arguments,later=function(){timeout=null,immediate||(result=func.apply(context,args))},callNow=immediate&&!timeout;return clearTimeout(timeout),timeout=setTimeout(later,wait),callNow&&(result=func.apply(context,args)),result}},_.once=function(func){var memo,ran=!1;return function(){return ran?memo:(ran=!0,memo=func.apply(this,arguments),func=null,memo)}},_.wrap=function(func,wrapper){return function(){var args=[func];return push.apply(args,arguments),wrapper.apply(this,args)}},_.compose=function(){var funcs=arguments;return function(){for(var args=arguments,i=funcs.length-1;i>=0;i--)args=[funcs[i].apply(this,args)];return args[0]}},_.after=function(times,func){return 0>=times?func():function(){return--times<1?func.apply(this,arguments):void 0}},_.keys=nativeKeys||function(obj){if(obj!==Object(obj))throw new TypeError("Invalid object");var keys=[];for(var key in obj)_.has(obj,key)&&(keys[keys.length]=key);return keys},_.values=function(obj){var values=[];for(var key in obj)_.has(obj,key)&&values.push(obj[key]);return values},_.pairs=function(obj){var pairs=[];for(var key in obj)_.has(obj,key)&&pairs.push([key,obj[key]]);return pairs},_.invert=function(obj){var result={};for(var key in obj)_.has(obj,key)&&(result[obj[key]]=key);return result},_.functions=_.methods=function(obj){var names=[];for(var key in obj)_.isFunction(obj[key])&&names.push(key);return names.sort()},_.extend=function(obj){return each(slice.call(arguments,1),function(source){if(source)for(var prop in source)obj[prop]=source[prop]}),obj},_.pick=function(obj){var copy={},keys=concat.apply(ArrayProto,slice.call(arguments,1));return each(keys,function(key){key in obj&&(copy[key]=obj[key])}),copy},_.omit=function(obj){var copy={},keys=concat.apply(ArrayProto,slice.call(arguments,1));for(var key in obj)_.contains(keys,key)||(copy[key]=obj[key]);return copy},_.defaults=function(obj){return each(slice.call(arguments,1),function(source){if(source)for(var prop in source)null==obj[prop]&&(obj[prop]=source[prop])}),obj},_.clone=function(obj){return _.isObject(obj)?_.isArray(obj)?obj.slice():_.extend({},obj):obj},_.tap=function(obj,interceptor){return interceptor(obj),obj};var eq=function(a,b,aStack,bStack){if(a===b)return 0!==a||1/a==1/b;if(null==a||null==b)return a===b;a instanceof _&&(a=a._wrapped),b instanceof _&&(b=b._wrapped);var className=toString.call(a);if(className!=toString.call(b))return!1;switch(className){case"[object String]":return a==String(b);case"[object Number]":return a!=+a?b!=+b:0==a?1/a==1/b:a==+b;case"[object Date]":case"[object Boolean]":return+a==+b;case"[object RegExp]":return a.source==b.source&&a.global==b.global&&a.multiline==b.multiline&&a.ignoreCase==b.ignoreCase}if("object"!=typeof a||"object"!=typeof b)return!1;for(var length=aStack.length;length--;)if(aStack[length]==a)return bStack[length]==b;aStack.push(a),bStack.push(b);var size=0,result=!0;if("[object Array]"==className){if(size=a.length,result=size==b.length)for(;size--&&(result=eq(a[size],b[size],aStack,bStack)););}else{var aCtor=a.constructor,bCtor=b.constructor;if(aCtor!==bCtor&&!(_.isFunction(aCtor)&&aCtor instanceof aCtor&&_.isFunction(bCtor)&&bCtor instanceof bCtor))return!1;for(var key in a)if(_.has(a,key)&&(size++,!(result=_.has(b,key)&&eq(a[key],b[key],aStack,bStack))))break;if(result){for(key in b)if(_.has(b,key)&&!size--)break;result=!size}}return aStack.pop(),bStack.pop(),result};_.isEqual=function(a,b){return eq(a,b,[],[])},_.isEmpty=function(obj){if(null==obj)return!0;if(_.isArray(obj)||_.isString(obj))return 0===obj.length;for(var key in obj)if(_.has(obj,key))return!1;return!0},_.isElement=function(obj){return!(!obj||1!==obj.nodeType)},_.isArray=nativeIsArray||function(obj){return"[object Array]"==toString.call(obj)},_.isObject=function(obj){return obj===Object(obj)},each(["Arguments","Function","String","Number","Date","RegExp"],function(name){_["is"+name]=function(obj){return toString.call(obj)=="[object "+name+"]"}}),_.isArguments(arguments)||(_.isArguments=function(obj){return!(!obj||!_.has(obj,"callee"))}),"function"!=typeof/./&&(_.isFunction=function(obj){return"function"==typeof obj}),_.isFinite=function(obj){return isFinite(obj)&&!isNaN(parseFloat(obj))},_.isNaN=function(obj){return _.isNumber(obj)&&obj!=+obj},_.isBoolean=function(obj){return obj===!0||obj===!1||"[object Boolean]"==toString.call(obj)},_.isNull=function(obj){return null===obj},_.isUndefined=function(obj){return void 0===obj},_.has=function(obj,key){return hasOwnProperty.call(obj,key)},_.noConflict=function(){return root._=previousUnderscore,this},_.identity=function(value){return value},_.times=function(n,iterator,context){for(var accum=Array(n),i=0;n>i;i++)accum[i]=iterator.call(context,i);return accum},_.random=function(min,max){return null==max&&(max=min,min=0),min+Math.floor(Math.random()*(max-min+1))};var entityMap={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;",
"/":"&#x2F;"}};entityMap.unescape=_.invert(entityMap.escape);var entityRegexes={escape:new RegExp("["+_.keys(entityMap.escape).join("")+"]","g"),unescape:new RegExp("("+_.keys(entityMap.unescape).join("|")+")","g")};_.each(["escape","unescape"],function(method){_[method]=function(string){return null==string?"":(""+string).replace(entityRegexes[method],function(match){return entityMap[method][match]})}}),_.result=function(object,property){if(null==object)return null;var value=object[property];return _.isFunction(value)?value.call(object):value},_.mixin=function(obj){each(_.functions(obj),function(name){var func=_[name]=obj[name];_.prototype[name]=function(){var args=[this._wrapped];return push.apply(args,arguments),result.call(this,func.apply(_,args))}})};var idCounter=0;_.uniqueId=function(prefix){var id=++idCounter+"";return prefix?prefix+id:id},_.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var noMatch=/(.)^/,escapes={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},escaper=/\\|'|\r|\n|\t|\u2028|\u2029/g;_.template=function(text,data,settings){var render;settings=_.defaults({},settings,_.templateSettings);var matcher=new RegExp([(settings.escape||noMatch).source,(settings.interpolate||noMatch).source,(settings.evaluate||noMatch).source].join("|")+"|$","g"),index=0,source="__p+='";text.replace(matcher,function(match,escape,interpolate,evaluate,offset){return source+=text.slice(index,offset).replace(escaper,function(match){return"\\"+escapes[match]}),escape&&(source+="'+\n((__t=("+escape+"))==null?'':_.escape(__t))+\n'"),interpolate&&(source+="'+\n((__t=("+interpolate+"))==null?'':__t)+\n'"),evaluate&&(source+="';\n"+evaluate+"\n__p+='"),index=offset+match.length,match}),source+="';\n",settings.variable||(source="with(obj||{}){\n"+source+"}\n"),source="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+source+"return __p;\n";try{render=new Function(settings.variable||"obj","_",source)}catch(e){throw e.source=source,e}if(data)return render(data,_);var template=function(data){return render.call(this,data,_)};return template.source="function("+(settings.variable||"obj")+"){\n"+source+"}",template},_.chain=function(obj){return _(obj).chain()};var result=function(obj){return this._chain?_(obj).chain():obj};_.mixin(_),each(["pop","push","reverse","shift","sort","splice","unshift"],function(name){var method=ArrayProto[name];_.prototype[name]=function(){var obj=this._wrapped;return method.apply(obj,arguments),"shift"!=name&&"splice"!=name||0!==obj.length||delete obj[0],result.call(this,obj)}}),each(["concat","join","slice"],function(name){var method=ArrayProto[name];_.prototype[name]=function(){return result.call(this,method.apply(this._wrapped,arguments))}}),_.extend(_.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}})}).call(this)},{}],6:[function(require,module,exports){"function"==typeof Object.create?module.exports=function(ctor,superCtor){ctor.super_=superCtor,ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function(){};TempCtor.prototype=superCtor.prototype,ctor.prototype=new TempCtor,ctor.prototype.constructor=ctor}},{}],7:[function(require,module,exports){(function(process,global){!function(){var define,requireModule,require,requirejs;!function(){var registry={},seen={};define=function(name,deps,callback){registry[name]={deps:deps,callback:callback}},requirejs=require=requireModule=function(name){function resolve(child){if("."!==child.charAt(0))return child;for(var parts=child.split("/"),parentBase=name.split("/").slice(0,-1),i=0,l=parts.length;l>i;i++){var part=parts[i];if(".."===part)parentBase.pop();else{if("."===part)continue;parentBase.push(part)}}return parentBase.join("/")}if(requirejs._eak_seen=registry,seen[name])return seen[name];if(seen[name]={},!registry[name])throw new Error("Could not find module "+name);for(var exports,mod=registry[name],deps=mod.deps,callback=mod.callback,reified=[],i=0,l=deps.length;l>i;i++)"exports"===deps[i]?reified.push(exports={}):reified.push(requireModule(resolve(deps[i])));var value=callback.apply(this,reified);return seen[name]=exports||value}}(),define("promise/all",["./utils","exports"],function(__dependency1__,__exports__){"use strict";function all(promises){var Promise=this;if(!isArray(promises))throw new TypeError("You must pass an array to all.");return new Promise(function(resolve,reject){function resolver(index){return function(value){resolveAll(index,value)}}function resolveAll(index,value){results[index]=value,0===--remaining&&resolve(results)}var promise,results=[],remaining=promises.length;0===remaining&&resolve([]);for(var i=0;i<promises.length;i++)promise=promises[i],promise&&isFunction(promise.then)?promise.then(resolver(i),reject):resolveAll(i,promise)})}var isArray=__dependency1__.isArray,isFunction=__dependency1__.isFunction;__exports__.all=all}),define("promise/asap",["exports"],function(__exports__){"use strict";function useNextTick(){return function(){process.nextTick(flush)}}function useMutationObserver(){var iterations=0,observer=new BrowserMutationObserver(flush),node=document.createTextNode("");return observer.observe(node,{characterData:!0}),function(){node.data=iterations=++iterations%2}}function useSetTimeout(){return function(){local.setTimeout(flush,1)}}function flush(){for(var i=0;i<queue.length;i++){var tuple=queue[i],callback=tuple[0],arg=tuple[1];callback(arg)}queue=[]}function asap(callback,arg){var length=queue.push([callback,arg]);1===length&&scheduleFlush()}var scheduleFlush,browserGlobal="undefined"!=typeof window?window:{},BrowserMutationObserver=browserGlobal.MutationObserver||browserGlobal.WebKitMutationObserver,local="undefined"!=typeof global?global:void 0===this?window:this,queue=[];scheduleFlush="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?useNextTick():BrowserMutationObserver?useMutationObserver():useSetTimeout(),__exports__.asap=asap}),define("promise/config",["exports"],function(__exports__){"use strict";function configure(name,value){return 2!==arguments.length?config[name]:void(config[name]=value)}var config={instrument:!1};__exports__.config=config,__exports__.configure=configure}),define("promise/polyfill",["./promise","./utils","exports"],function(__dependency1__,__dependency2__,__exports__){"use strict";function polyfill(){var local;local="undefined"!=typeof global?global:"undefined"!=typeof window&&window.document?window:self;var es6PromiseSupport="Promise"in local&&"resolve"in local.Promise&&"reject"in local.Promise&&"all"in local.Promise&&"race"in local.Promise&&function(){var resolve;return new local.Promise(function(r){resolve=r}),isFunction(resolve)}();es6PromiseSupport||(local.Promise=RSVPPromise)}var RSVPPromise=__dependency1__.Promise,isFunction=__dependency2__.isFunction;__exports__.polyfill=polyfill}),define("promise/promise",["./config","./utils","./all","./race","./resolve","./reject","./asap","exports"],function(__dependency1__,__dependency2__,__dependency3__,__dependency4__,__dependency5__,__dependency6__,__dependency7__,__exports__){"use strict";function Promise(resolver){if(!isFunction(resolver))throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");if(!(this instanceof Promise))throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");this._subscribers=[],invokeResolver(resolver,this)}function invokeResolver(resolver,promise){function resolvePromise(value){resolve(promise,value)}function rejectPromise(reason){reject(promise,reason)}try{resolver(resolvePromise,rejectPromise)}catch(e){rejectPromise(e)}}function invokeCallback(settled,promise,callback,detail){var value,error,succeeded,failed,hasCallback=isFunction(callback);if(hasCallback)try{value=callback(detail),succeeded=!0}catch(e){failed=!0,error=e}else value=detail,succeeded=!0;handleThenable(promise,value)||(hasCallback&&succeeded?resolve(promise,value):failed?reject(promise,error):settled===FULFILLED?resolve(promise,value):settled===REJECTED&&reject(promise,value))}function subscribe(parent,child,onFulfillment,onRejection){var subscribers=parent._subscribers,length=subscribers.length;subscribers[length]=child,subscribers[length+FULFILLED]=onFulfillment,subscribers[length+REJECTED]=onRejection}function publish(promise,settled){for(var child,callback,subscribers=promise._subscribers,detail=promise._detail,i=0;i<subscribers.length;i+=3)child=subscribers[i],callback=subscribers[i+settled],invokeCallback(settled,child,callback,detail);promise._subscribers=null}function handleThenable(promise,value){var resolved,then=null;try{if(promise===value)throw new TypeError("A promises callback cannot return that same promise.");if(objectOrFunction(value)&&(then=value.then,isFunction(then)))return then.call(value,function(val){return resolved?!0:(resolved=!0,void(value!==val?resolve(promise,val):fulfill(promise,val)))},function(val){return resolved?!0:(resolved=!0,void reject(promise,val))}),!0}catch(error){return resolved?!0:(reject(promise,error),!0)}return!1}function resolve(promise,value){promise===value?fulfill(promise,value):handleThenable(promise,value)||fulfill(promise,value)}function fulfill(promise,value){promise._state===PENDING&&(promise._state=SEALED,promise._detail=value,config.async(publishFulfillment,promise))}function reject(promise,reason){promise._state===PENDING&&(promise._state=SEALED,promise._detail=reason,config.async(publishRejection,promise))}function publishFulfillment(promise){publish(promise,promise._state=FULFILLED)}function publishRejection(promise){publish(promise,promise._state=REJECTED)}var config=__dependency1__.config,objectOrFunction=(__dependency1__.configure,__dependency2__.objectOrFunction),isFunction=__dependency2__.isFunction,all=(__dependency2__.now,__dependency3__.all),race=__dependency4__.race,staticResolve=__dependency5__.resolve,staticReject=__dependency6__.reject,asap=__dependency7__.asap;config.async=asap;var PENDING=void 0,SEALED=0,FULFILLED=1,REJECTED=2;Promise.prototype={constructor:Promise,_state:void 0,_detail:void 0,_subscribers:void 0,then:function(onFulfillment,onRejection){var promise=this,thenPromise=new this.constructor(function(){});if(this._state){var callbacks=arguments;config.async(function(){invokeCallback(promise._state,thenPromise,callbacks[promise._state-1],promise._detail)})}else subscribe(this,thenPromise,onFulfillment,onRejection);return thenPromise},"catch":function(onRejection){return this.then(null,onRejection)}},Promise.all=all,Promise.race=race,Promise.resolve=staticResolve,Promise.reject=staticReject,__exports__.Promise=Promise}),define("promise/race",["./utils","exports"],function(__dependency1__,__exports__){"use strict";function race(promises){var Promise=this;if(!isArray(promises))throw new TypeError("You must pass an array to race.");return new Promise(function(resolve,reject){for(var promise,i=0;i<promises.length;i++)promise=promises[i],promise&&"function"==typeof promise.then?promise.then(resolve,reject):resolve(promise)})}var isArray=__dependency1__.isArray;__exports__.race=race}),define("promise/reject",["exports"],function(__exports__){"use strict";function reject(reason){var Promise=this;return new Promise(function(resolve,reject){reject(reason)})}__exports__.reject=reject}),define("promise/resolve",["exports"],function(__exports__){"use strict";function resolve(value){if(value&&"object"==typeof value&&value.constructor===this)return value;var Promise=this;return new Promise(function(resolve){resolve(value)})}__exports__.resolve=resolve}),define("promise/utils",["exports"],function(__exports__){"use strict";function objectOrFunction(x){return isFunction(x)||"object"==typeof x&&null!==x}function isFunction(x){return"function"==typeof x}function isArray(x){return"[object Array]"===Object.prototype.toString.call(x)}var now=Date.now||function(){return(new Date).getTime()};__exports__.objectOrFunction=objectOrFunction,__exports__.isFunction=isFunction,__exports__.isArray=isArray,__exports__.now=now}),requireModule("promise/polyfill").polyfill()}(),function(root,factory){"object"==typeof exports&&"object"==typeof module?module.exports=factory():"function"==typeof define&&define.amd?define([],factory):"object"==typeof exports?exports.localforage=factory():root.localforage=factory()}(this,function(){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}exports.__esModule=!0,function(){function callWhenReady(localForageInstance,libraryMethod){localForageInstance[libraryMethod]=function(){var _args=arguments;return localForageInstance.ready().then(function(){return localForageInstance[libraryMethod].apply(localForageInstance,_args)})}}function extend(){for(var i=1;i<arguments.length;i++){var arg=arguments[i];if(arg)for(var key in arg)arg.hasOwnProperty(key)&&(isArray(arg[key])?arguments[0][key]=arg[key].slice():arguments[0][key]=arg[key])}return arguments[0]}function isLibraryDriver(driverName){for(var driver in DriverType)if(DriverType.hasOwnProperty(driver)&&DriverType[driver]===driverName)return!0;return!1}var CustomDrivers={},DriverType={INDEXEDDB:"asyncStorage",LOCALSTORAGE:"localStorageWrapper",WEBSQL:"webSQLStorage"},DefaultDriverOrder=[DriverType.INDEXEDDB,DriverType.WEBSQL,DriverType.LOCALSTORAGE],LibraryMethods=["clear","getItem","iterate","key","keys","length","removeItem","setItem"],DefaultConfig={description:"",driver:DefaultDriverOrder.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1},driverSupport=function(self){var indexedDB=indexedDB||self.indexedDB||self.webkitIndexedDB||self.mozIndexedDB||self.OIndexedDB||self.msIndexedDB,result={};return result[DriverType.WEBSQL]=!!self.openDatabase,result[DriverType.INDEXEDDB]=!!function(){if("undefined"!=typeof self.openDatabase&&self.navigator&&self.navigator.userAgent&&/Safari/.test(self.navigator.userAgent)&&!/Chrome/.test(self.navigator.userAgent))return!1;try{return indexedDB&&"function"==typeof indexedDB.open&&"undefined"!=typeof self.IDBKeyRange}catch(e){return!1}}(),result[DriverType.LOCALSTORAGE]=!!function(){try{return self.localStorage&&"setItem"in self.localStorage&&self.localStorage.setItem}catch(e){return!1}}(),result}(this),isArray=Array.isArray||function(arg){return"[object Array]"===Object.prototype.toString.call(arg)},LocalForage=function(){function LocalForage(options){_classCallCheck(this,LocalForage),this.INDEXEDDB=DriverType.INDEXEDDB,this.LOCALSTORAGE=DriverType.LOCALSTORAGE,this.WEBSQL=DriverType.WEBSQL,this._defaultConfig=extend({},DefaultConfig),this._config=extend({},this._defaultConfig,options),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver)}return LocalForage.prototype.config=function(options){if("object"==typeof options){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var i in options)"storeName"===i&&(options[i]=options[i].replace(/\W/g,"_")),this._config[i]=options[i];return"driver"in options&&options.driver&&this.setDriver(this._config.driver),!0}return"string"==typeof options?this._config[options]:this._config},LocalForage.prototype.defineDriver=function(driverObject,callback,errorCallback){var promise=new Promise(function(resolve,reject){try{var driverName=driverObject._driver,complianceError=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver"),namingError=new Error("Custom driver name already in use: "+driverObject._driver);if(!driverObject._driver)return void reject(complianceError);if(isLibraryDriver(driverObject._driver))return void reject(namingError);for(var customDriverMethods=LibraryMethods.concat("_initStorage"),i=0;i<customDriverMethods.length;i++){var customDriverMethod=customDriverMethods[i];if(!customDriverMethod||!driverObject[customDriverMethod]||"function"!=typeof driverObject[customDriverMethod])return void reject(complianceError)}var supportPromise=Promise.resolve(!0);"_support"in driverObject&&(supportPromise=driverObject._support&&"function"==typeof driverObject._support?driverObject._support():Promise.resolve(!!driverObject._support)),supportPromise.then(function(supportResult){driverSupport[driverName]=supportResult,CustomDrivers[driverName]=driverObject,resolve()},reject)}catch(e){reject(e)}});return promise.then(callback,errorCallback),promise},LocalForage.prototype.driver=function(){return this._driver||null},LocalForage.prototype.getDriver=function(driverName,callback,errorCallback){var self=this,getDriverPromise=function(){if(isLibraryDriver(driverName))switch(driverName){case self.INDEXEDDB:return new Promise(function(resolve,reject){resolve(__webpack_require__(1))});case self.LOCALSTORAGE:return new Promise(function(resolve,reject){resolve(__webpack_require__(2))});case self.WEBSQL:return new Promise(function(resolve,reject){resolve(__webpack_require__(4))})}else if(CustomDrivers[driverName])return Promise.resolve(CustomDrivers[driverName]);return Promise.reject(new Error("Driver not found."))}();return getDriverPromise.then(callback,errorCallback),getDriverPromise},LocalForage.prototype.getSerializer=function(callback){var serializerPromise=new Promise(function(resolve,reject){resolve(__webpack_require__(3))});return callback&&"function"==typeof callback&&serializerPromise.then(function(result){callback(result)}),serializerPromise},LocalForage.prototype.ready=function(callback){var self=this,promise=self._driverSet.then(function(){return null===self._ready&&(self._ready=self._initDriver()),self._ready});return promise.then(callback,callback),promise},LocalForage.prototype.setDriver=function(drivers,callback,errorCallback){function setDriverToConfig(){self._config.driver=self.driver()}function initDriver(supportedDrivers){return function(){function driverPromiseLoop(){for(;currentDriverIndex<supportedDrivers.length;){var driverName=supportedDrivers[currentDriverIndex];return currentDriverIndex++,self._dbInfo=null,self._ready=null,self.getDriver(driverName).then(function(driver){return self._extend(driver),setDriverToConfig(),self._ready=self._initStorage(self._config),self._ready})["catch"](driverPromiseLoop)}setDriverToConfig();var error=new Error("No available storage method found.");return self._driverSet=Promise.reject(error),self._driverSet}var currentDriverIndex=0;return driverPromiseLoop()}}var self=this;isArray(drivers)||(drivers=[drivers]);var supportedDrivers=this._getSupportedDrivers(drivers),oldDriverSetDone=null!==this._driverSet?this._driverSet["catch"](function(){return Promise.resolve()}):Promise.resolve();return this._driverSet=oldDriverSetDone.then(function(){var driverName=supportedDrivers[0];return self._dbInfo=null,self._ready=null,self.getDriver(driverName).then(function(driver){self._driver=driver._driver,setDriverToConfig(),self._wrapLibraryMethodsWithReady(),self._initDriver=initDriver(supportedDrivers)})})["catch"](function(){setDriverToConfig();var error=new Error("No available storage method found.");return self._driverSet=Promise.reject(error),self._driverSet}),this._driverSet.then(callback,errorCallback),this._driverSet},LocalForage.prototype.supports=function(driverName){return!!driverSupport[driverName]},LocalForage.prototype._extend=function(libraryMethodsAndProperties){extend(this,libraryMethodsAndProperties)},LocalForage.prototype._getSupportedDrivers=function(drivers){for(var supportedDrivers=[],i=0,len=drivers.length;len>i;i++){var driverName=drivers[i];this.supports(driverName)&&supportedDrivers.push(driverName)}return supportedDrivers},LocalForage.prototype._wrapLibraryMethodsWithReady=function(){for(var i=0;i<LibraryMethods.length;i++)callWhenReady(this,LibraryMethods[i])},LocalForage.prototype.createInstance=function(options){return new LocalForage(options)},LocalForage}(),localForage=new LocalForage;exports["default"]=localForage}.call("undefined"!=typeof window?window:self),module.exports=exports["default"]},function(module,exports){"use strict";exports.__esModule=!0,function(){function _createBlob(parts,properties){parts=parts||[],properties=properties||{};try{return new Blob(parts,properties)}catch(e){if("TypeError"!==e.name)throw e;for(var BlobBuilder=globalObject.BlobBuilder||globalObject.MSBlobBuilder||globalObject.MozBlobBuilder||globalObject.WebKitBlobBuilder,builder=new BlobBuilder,i=0;i<parts.length;i+=1)builder.append(parts[i]);return builder.getBlob(properties.type)}}function _binStringToArrayBuffer(bin){for(var length=bin.length,buf=new ArrayBuffer(length),arr=new Uint8Array(buf),i=0;length>i;i++)arr[i]=bin.charCodeAt(i);return buf}function _blobAjax(url){return new Promise(function(resolve,reject){var xhr=new XMLHttpRequest;xhr.open("GET",url),xhr.withCredentials=!0,xhr.responseType="arraybuffer",xhr.onreadystatechange=function(){return 4===xhr.readyState?200===xhr.status?resolve({response:xhr.response,type:xhr.getResponseHeader("Content-Type")}):void reject({status:xhr.status,response:xhr.response}):void 0},xhr.send()})}function _checkBlobSupportWithoutCaching(idb){return new Promise(function(resolve,reject){var blob=_createBlob([""],{type:"image/png"}),txn=idb.transaction([DETECT_BLOB_SUPPORT_STORE],"readwrite");txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob,"key"),txn.oncomplete=function(){var blobTxn=idb.transaction([DETECT_BLOB_SUPPORT_STORE],"readwrite"),getBlobReq=blobTxn.objectStore(DETECT_BLOB_SUPPORT_STORE).get("key");getBlobReq.onerror=reject,getBlobReq.onsuccess=function(e){var storedBlob=e.target.result,url=URL.createObjectURL(storedBlob);_blobAjax(url).then(function(res){resolve(!(!res||"image/png"!==res.type))},function(){resolve(!1)}).then(function(){URL.revokeObjectURL(url)})}}})["catch"](function(){return!1})}function _checkBlobSupport(idb){return"boolean"==typeof supportsBlobs?Promise.resolve(supportsBlobs):_checkBlobSupportWithoutCaching(idb).then(function(value){return supportsBlobs=value})}function _encodeBlob(blob){return new Promise(function(resolve,reject){var reader=new FileReader;reader.onerror=reject,reader.onloadend=function(e){var base64=btoa(e.target.result||"");resolve({__local_forage_encoded_blob:!0,data:base64,type:blob.type})},reader.readAsBinaryString(blob)})}function _decodeBlob(encodedBlob){var arrayBuff=_binStringToArrayBuffer(atob(encodedBlob.data));return _createBlob([arrayBuff],{type:encodedBlob.type})}function _isEncodedBlob(value){return value&&value.__local_forage_encoded_blob}function _initStorage(options){function ignoreErrors(){return Promise.resolve()}var self=this,dbInfo={db:null};if(options)for(var i in options)dbInfo[i]=options[i];dbContexts||(dbContexts={});var dbContext=dbContexts[dbInfo.name];dbContext||(dbContext={forages:[],db:null},dbContexts[dbInfo.name]=dbContext),dbContext.forages.push(this);for(var readyPromises=[],j=0;j<dbContext.forages.length;j++){var forage=dbContext.forages[j];forage!==this&&readyPromises.push(forage.ready()["catch"](ignoreErrors))}var forages=dbContext.forages.slice(0);return Promise.all(readyPromises).then(function(){return dbInfo.db=dbContext.db,_getOriginalConnection(dbInfo)}).then(function(db){return dbInfo.db=db,_isUpgradeNeeded(dbInfo,self._defaultConfig.version)?_getUpgradedConnection(dbInfo):db}).then(function(db){dbInfo.db=dbContext.db=db,self._dbInfo=dbInfo;for(var k in forages){var forage=forages[k];forage!==self&&(forage._dbInfo.db=dbInfo.db,forage._dbInfo.version=dbInfo.version)}})}function _getOriginalConnection(dbInfo){return _getConnection(dbInfo,!1)}function _getUpgradedConnection(dbInfo){return _getConnection(dbInfo,!0)}function _getConnection(dbInfo,upgradeNeeded){return new Promise(function(resolve,reject){if(dbInfo.db){if(!upgradeNeeded)return resolve(dbInfo.db);dbInfo.db.close()}var dbArgs=[dbInfo.name];upgradeNeeded&&dbArgs.push(dbInfo.version);var openreq=indexedDB.open.apply(indexedDB,dbArgs);upgradeNeeded&&(openreq.onupgradeneeded=function(e){var db=openreq.result;try{db.createObjectStore(dbInfo.storeName),e.oldVersion<=1&&db.createObjectStore(DETECT_BLOB_SUPPORT_STORE)}catch(ex){if("ConstraintError"!==ex.name)throw ex;globalObject.console.warn('The database "'+dbInfo.name+'" has been upgraded from version '+e.oldVersion+" to version "+e.newVersion+', but the storage "'+dbInfo.storeName+'" already exists.')}}),openreq.onerror=function(){reject(openreq.error)},openreq.onsuccess=function(){resolve(openreq.result)}})}function _isUpgradeNeeded(dbInfo,defaultVersion){if(!dbInfo.db)return!0;var isNewStore=!dbInfo.db.objectStoreNames.contains(dbInfo.storeName),isDowngrade=dbInfo.version<dbInfo.db.version,isUpgrade=dbInfo.version>dbInfo.db.version;if(isDowngrade&&(dbInfo.version!==defaultVersion&&globalObject.console.warn('The database "'+dbInfo.name+"\" can't be downgraded from version "+dbInfo.db.version+" to version "+dbInfo.version+"."),dbInfo.version=dbInfo.db.version),isUpgrade||isNewStore){if(isNewStore){var incVersion=dbInfo.db.version+1;incVersion>dbInfo.version&&(dbInfo.version=incVersion)}return!0}return!1}function getItem(key,callback){var self=this;"string"!=typeof key&&(globalObject.console.warn(key+" used as a key, but it is not a string."),key=String(key));var promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo,store=dbInfo.db.transaction(dbInfo.storeName,"readonly").objectStore(dbInfo.storeName),req=store.get(key);req.onsuccess=function(){var value=req.result;void 0===value&&(value=null),_isEncodedBlob(value)&&(value=_decodeBlob(value)),resolve(value)},req.onerror=function(){reject(req.error)}})["catch"](reject)});return executeCallback(promise,callback),promise}function iterate(iterator,callback){var self=this,promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo,store=dbInfo.db.transaction(dbInfo.storeName,"readonly").objectStore(dbInfo.storeName),req=store.openCursor(),iterationNumber=1;req.onsuccess=function(){var cursor=req.result;if(cursor){var value=cursor.value;_isEncodedBlob(value)&&(value=_decodeBlob(value));var result=iterator(value,cursor.key,iterationNumber++);void 0!==result?resolve(result):cursor["continue"]()}else resolve()},req.onerror=function(){reject(req.error)}})["catch"](reject)});return executeCallback(promise,callback),promise}function setItem(key,value,callback){var self=this;"string"!=typeof key&&(globalObject.console.warn(key+" used as a key, but it is not a string."),key=String(key));var promise=new Promise(function(resolve,reject){var dbInfo;self.ready().then(function(){return dbInfo=self._dbInfo,_checkBlobSupport(dbInfo.db)}).then(function(blobSupport){return!blobSupport&&value instanceof Blob?_encodeBlob(value):value}).then(function(value){var transaction=dbInfo.db.transaction(dbInfo.storeName,"readwrite"),store=transaction.objectStore(dbInfo.storeName);null===value&&(value=void 0);var req=store.put(value,key);transaction.oncomplete=function(){void 0===value&&(value=null),resolve(value)},transaction.onabort=transaction.onerror=function(){var err=req.error?req.error:req.transaction.error;reject(err)}})["catch"](reject)});return executeCallback(promise,callback),promise}function removeItem(key,callback){var self=this;"string"!=typeof key&&(globalObject.console.warn(key+" used as a key, but it is not a string."),key=String(key));var promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo,transaction=dbInfo.db.transaction(dbInfo.storeName,"readwrite"),store=transaction.objectStore(dbInfo.storeName),req=store["delete"](key);transaction.oncomplete=function(){resolve()},transaction.onerror=function(){reject(req.error)},transaction.onabort=function(){var err=req.error?req.error:req.transaction.error;reject(err)}})["catch"](reject)});return executeCallback(promise,callback),promise}function clear(callback){var self=this,promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo,transaction=dbInfo.db.transaction(dbInfo.storeName,"readwrite"),store=transaction.objectStore(dbInfo.storeName),req=store.clear();transaction.oncomplete=function(){resolve()},transaction.onabort=transaction.onerror=function(){var err=req.error?req.error:req.transaction.error;reject(err)}})["catch"](reject)});return executeCallback(promise,callback),promise}function length(callback){var self=this,promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo,store=dbInfo.db.transaction(dbInfo.storeName,"readonly").objectStore(dbInfo.storeName),req=store.count();req.onsuccess=function(){resolve(req.result)},req.onerror=function(){reject(req.error)}})["catch"](reject)});return executeCallback(promise,callback),promise}function key(n,callback){var self=this,promise=new Promise(function(resolve,reject){return 0>n?void resolve(null):void self.ready().then(function(){var dbInfo=self._dbInfo,store=dbInfo.db.transaction(dbInfo.storeName,"readonly").objectStore(dbInfo.storeName),advanced=!1,req=store.openCursor();req.onsuccess=function(){var cursor=req.result;return cursor?void(0===n?resolve(cursor.key):advanced?resolve(cursor.key):(advanced=!0,cursor.advance(n))):void resolve(null)},req.onerror=function(){reject(req.error)}})["catch"](reject)});return executeCallback(promise,callback),promise}function keys(callback){var self=this,promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo,store=dbInfo.db.transaction(dbInfo.storeName,"readonly").objectStore(dbInfo.storeName),req=store.openCursor(),keys=[];req.onsuccess=function(){var cursor=req.result;return cursor?(keys.push(cursor.key),void cursor["continue"]()):void resolve(keys)},req.onerror=function(){reject(req.error)}})["catch"](reject)});return executeCallback(promise,callback),promise}function executeCallback(promise,callback){callback&&promise.then(function(result){callback(null,result)},function(error){callback(error)})}var globalObject=this,indexedDB=indexedDB||this.indexedDB||this.webkitIndexedDB||this.mozIndexedDB||this.OIndexedDB||this.msIndexedDB;if(indexedDB){var supportsBlobs,dbContexts,DETECT_BLOB_SUPPORT_STORE="local-forage-detect-blob-support",asyncStorage={_driver:"asyncStorage",_initStorage:_initStorage,iterate:iterate,getItem:getItem,setItem:setItem,removeItem:removeItem,clear:clear,length:length,key:key,keys:keys};exports["default"]=asyncStorage}}.call("undefined"!=typeof window?window:self),module.exports=exports["default"]},function(module,exports,__webpack_require__){"use strict";exports.__esModule=!0,function(){function _initStorage(options){var self=this,dbInfo={};if(options)for(var i in options)dbInfo[i]=options[i];return dbInfo.keyPrefix=dbInfo.name+"/",dbInfo.storeName!==self._defaultConfig.storeName&&(dbInfo.keyPrefix+=dbInfo.storeName+"/"),self._dbInfo=dbInfo,new Promise(function(resolve,reject){resolve(__webpack_require__(3))}).then(function(lib){return dbInfo.serializer=lib,Promise.resolve()})}function clear(callback){var self=this,promise=self.ready().then(function(){for(var keyPrefix=self._dbInfo.keyPrefix,i=localStorage.length-1;i>=0;i--){
var key=localStorage.key(i);0===key.indexOf(keyPrefix)&&localStorage.removeItem(key)}});return executeCallback(promise,callback),promise}function getItem(key,callback){var self=this;"string"!=typeof key&&(globalObject.console.warn(key+" used as a key, but it is not a string."),key=String(key));var promise=self.ready().then(function(){var dbInfo=self._dbInfo,result=localStorage.getItem(dbInfo.keyPrefix+key);return result&&(result=dbInfo.serializer.deserialize(result)),result});return executeCallback(promise,callback),promise}function iterate(iterator,callback){var self=this,promise=self.ready().then(function(){for(var dbInfo=self._dbInfo,keyPrefix=dbInfo.keyPrefix,keyPrefixLength=keyPrefix.length,length=localStorage.length,iterationNumber=1,i=0;length>i;i++){var key=localStorage.key(i);if(0===key.indexOf(keyPrefix)){var value=localStorage.getItem(key);if(value&&(value=dbInfo.serializer.deserialize(value)),value=iterator(value,key.substring(keyPrefixLength),iterationNumber++),void 0!==value)return value}}});return executeCallback(promise,callback),promise}function key(n,callback){var self=this,promise=self.ready().then(function(){var result,dbInfo=self._dbInfo;try{result=localStorage.key(n)}catch(error){result=null}return result&&(result=result.substring(dbInfo.keyPrefix.length)),result});return executeCallback(promise,callback),promise}function keys(callback){var self=this,promise=self.ready().then(function(){for(var dbInfo=self._dbInfo,length=localStorage.length,keys=[],i=0;length>i;i++)0===localStorage.key(i).indexOf(dbInfo.keyPrefix)&&keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));return keys});return executeCallback(promise,callback),promise}function length(callback){var self=this,promise=self.keys().then(function(keys){return keys.length});return executeCallback(promise,callback),promise}function removeItem(key,callback){var self=this;"string"!=typeof key&&(globalObject.console.warn(key+" used as a key, but it is not a string."),key=String(key));var promise=self.ready().then(function(){var dbInfo=self._dbInfo;localStorage.removeItem(dbInfo.keyPrefix+key)});return executeCallback(promise,callback),promise}function setItem(key,value,callback){var self=this;"string"!=typeof key&&(globalObject.console.warn(key+" used as a key, but it is not a string."),key=String(key));var promise=self.ready().then(function(){void 0===value&&(value=null);var originalValue=value;return new Promise(function(resolve,reject){var dbInfo=self._dbInfo;dbInfo.serializer.serialize(value,function(value,error){if(error)reject(error);else try{localStorage.setItem(dbInfo.keyPrefix+key,value),resolve(originalValue)}catch(e){("QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&reject(e),reject(e)}})})});return executeCallback(promise,callback),promise}function executeCallback(promise,callback){callback&&promise.then(function(result){callback(null,result)},function(error){callback(error)})}var globalObject=this,localStorage=null;try{if(!(this.localStorage&&"setItem"in this.localStorage))return;localStorage=this.localStorage}catch(e){return}var localStorageWrapper={_driver:"localStorageWrapper",_initStorage:_initStorage,iterate:iterate,getItem:getItem,setItem:setItem,removeItem:removeItem,clear:clear,length:length,key:key,keys:keys};exports["default"]=localStorageWrapper}.call("undefined"!=typeof window?window:self),module.exports=exports["default"]},function(module,exports){"use strict";exports.__esModule=!0,function(){function _createBlob(parts,properties){parts=parts||[],properties=properties||{};try{return new Blob(parts,properties)}catch(err){if("TypeError"!==err.name)throw err;for(var BlobBuilder=globalObject.BlobBuilder||globalObject.MSBlobBuilder||globalObject.MozBlobBuilder||globalObject.WebKitBlobBuilder,builder=new BlobBuilder,i=0;i<parts.length;i+=1)builder.append(parts[i]);return builder.getBlob(properties.type)}}function serialize(value,callback){var valueString="";if(value&&(valueString=value.toString()),value&&("[object ArrayBuffer]"===value.toString()||value.buffer&&"[object ArrayBuffer]"===value.buffer.toString())){var buffer,marker=SERIALIZED_MARKER;value instanceof ArrayBuffer?(buffer=value,marker+=TYPE_ARRAYBUFFER):(buffer=value.buffer,"[object Int8Array]"===valueString?marker+=TYPE_INT8ARRAY:"[object Uint8Array]"===valueString?marker+=TYPE_UINT8ARRAY:"[object Uint8ClampedArray]"===valueString?marker+=TYPE_UINT8CLAMPEDARRAY:"[object Int16Array]"===valueString?marker+=TYPE_INT16ARRAY:"[object Uint16Array]"===valueString?marker+=TYPE_UINT16ARRAY:"[object Int32Array]"===valueString?marker+=TYPE_INT32ARRAY:"[object Uint32Array]"===valueString?marker+=TYPE_UINT32ARRAY:"[object Float32Array]"===valueString?marker+=TYPE_FLOAT32ARRAY:"[object Float64Array]"===valueString?marker+=TYPE_FLOAT64ARRAY:callback(new Error("Failed to get type for BinaryArray"))),callback(marker+bufferToString(buffer))}else if("[object Blob]"===valueString){var fileReader=new FileReader;fileReader.onload=function(){var str=BLOB_TYPE_PREFIX+value.type+"~"+bufferToString(this.result);callback(SERIALIZED_MARKER+TYPE_BLOB+str)},fileReader.readAsArrayBuffer(value)}else try{callback(JSON.stringify(value))}catch(e){console.error("Couldn't convert value into a JSON string: ",value),callback(null,e)}}function deserialize(value){if(value.substring(0,SERIALIZED_MARKER_LENGTH)!==SERIALIZED_MARKER)return JSON.parse(value);var blobType,serializedString=value.substring(TYPE_SERIALIZED_MARKER_LENGTH),type=value.substring(SERIALIZED_MARKER_LENGTH,TYPE_SERIALIZED_MARKER_LENGTH);if(type===TYPE_BLOB&&BLOB_TYPE_PREFIX_REGEX.test(serializedString)){var matcher=serializedString.match(BLOB_TYPE_PREFIX_REGEX);blobType=matcher[1],serializedString=serializedString.substring(matcher[0].length)}var buffer=stringToBuffer(serializedString);switch(type){case TYPE_ARRAYBUFFER:return buffer;case TYPE_BLOB:return _createBlob([buffer],{type:blobType});case TYPE_INT8ARRAY:return new Int8Array(buffer);case TYPE_UINT8ARRAY:return new Uint8Array(buffer);case TYPE_UINT8CLAMPEDARRAY:return new Uint8ClampedArray(buffer);case TYPE_INT16ARRAY:return new Int16Array(buffer);case TYPE_UINT16ARRAY:return new Uint16Array(buffer);case TYPE_INT32ARRAY:return new Int32Array(buffer);case TYPE_UINT32ARRAY:return new Uint32Array(buffer);case TYPE_FLOAT32ARRAY:return new Float32Array(buffer);case TYPE_FLOAT64ARRAY:return new Float64Array(buffer);default:throw new Error("Unkown type: "+type)}}function stringToBuffer(serializedString){var i,encoded1,encoded2,encoded3,encoded4,bufferLength=.75*serializedString.length,len=serializedString.length,p=0;"="===serializedString[serializedString.length-1]&&(bufferLength--,"="===serializedString[serializedString.length-2]&&bufferLength--);var buffer=new ArrayBuffer(bufferLength),bytes=new Uint8Array(buffer);for(i=0;len>i;i+=4)encoded1=BASE_CHARS.indexOf(serializedString[i]),encoded2=BASE_CHARS.indexOf(serializedString[i+1]),encoded3=BASE_CHARS.indexOf(serializedString[i+2]),encoded4=BASE_CHARS.indexOf(serializedString[i+3]),bytes[p++]=encoded1<<2|encoded2>>4,bytes[p++]=(15&encoded2)<<4|encoded3>>2,bytes[p++]=(3&encoded3)<<6|63&encoded4;return buffer}function bufferToString(buffer){var i,bytes=new Uint8Array(buffer),base64String="";for(i=0;i<bytes.length;i+=3)base64String+=BASE_CHARS[bytes[i]>>2],base64String+=BASE_CHARS[(3&bytes[i])<<4|bytes[i+1]>>4],base64String+=BASE_CHARS[(15&bytes[i+1])<<2|bytes[i+2]>>6],base64String+=BASE_CHARS[63&bytes[i+2]];return bytes.length%3===2?base64String=base64String.substring(0,base64String.length-1)+"=":bytes.length%3===1&&(base64String=base64String.substring(0,base64String.length-2)+"=="),base64String}var BASE_CHARS="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",BLOB_TYPE_PREFIX="~~local_forage_type~",BLOB_TYPE_PREFIX_REGEX=/^~~local_forage_type~([^~]+)~/,SERIALIZED_MARKER="__lfsc__:",SERIALIZED_MARKER_LENGTH=SERIALIZED_MARKER.length,TYPE_ARRAYBUFFER="arbf",TYPE_BLOB="blob",TYPE_INT8ARRAY="si08",TYPE_UINT8ARRAY="ui08",TYPE_UINT8CLAMPEDARRAY="uic8",TYPE_INT16ARRAY="si16",TYPE_INT32ARRAY="si32",TYPE_UINT16ARRAY="ur16",TYPE_UINT32ARRAY="ui32",TYPE_FLOAT32ARRAY="fl32",TYPE_FLOAT64ARRAY="fl64",TYPE_SERIALIZED_MARKER_LENGTH=SERIALIZED_MARKER_LENGTH+TYPE_ARRAYBUFFER.length,globalObject=this,localforageSerializer={serialize:serialize,deserialize:deserialize,stringToBuffer:stringToBuffer,bufferToString:bufferToString};exports["default"]=localforageSerializer}.call("undefined"!=typeof window?window:self),module.exports=exports["default"]},function(module,exports,__webpack_require__){"use strict";exports.__esModule=!0,function(){function _initStorage(options){var self=this,dbInfo={db:null};if(options)for(var i in options)dbInfo[i]="string"!=typeof options[i]?options[i].toString():options[i];var dbInfoPromise=new Promise(function(resolve,reject){try{dbInfo.db=openDatabase(dbInfo.name,String(dbInfo.version),dbInfo.description,dbInfo.size)}catch(e){return self.setDriver(self.LOCALSTORAGE).then(function(){return self._initStorage(options)}).then(resolve)["catch"](reject)}dbInfo.db.transaction(function(t){t.executeSql("CREATE TABLE IF NOT EXISTS "+dbInfo.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],function(){self._dbInfo=dbInfo,resolve()},function(t,error){reject(error)})})});return new Promise(function(resolve,reject){resolve(__webpack_require__(3))}).then(function(lib){return dbInfo.serializer=lib,dbInfoPromise})}function getItem(key,callback){var self=this;"string"!=typeof key&&(globalObject.console.warn(key+" used as a key, but it is not a string."),key=String(key));var promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){t.executeSql("SELECT * FROM "+dbInfo.storeName+" WHERE key = ? LIMIT 1",[key],function(t,results){var result=results.rows.length?results.rows.item(0).value:null;result&&(result=dbInfo.serializer.deserialize(result)),resolve(result)},function(t,error){reject(error)})})})["catch"](reject)});return executeCallback(promise,callback),promise}function iterate(iterator,callback){var self=this,promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){t.executeSql("SELECT * FROM "+dbInfo.storeName,[],function(t,results){for(var rows=results.rows,length=rows.length,i=0;length>i;i++){var item=rows.item(i),result=item.value;if(result&&(result=dbInfo.serializer.deserialize(result)),result=iterator(result,item.key,i+1),void 0!==result)return void resolve(result)}resolve()},function(t,error){reject(error)})})})["catch"](reject)});return executeCallback(promise,callback),promise}function setItem(key,value,callback){var self=this;"string"!=typeof key&&(globalObject.console.warn(key+" used as a key, but it is not a string."),key=String(key));var promise=new Promise(function(resolve,reject){self.ready().then(function(){void 0===value&&(value=null);var originalValue=value,dbInfo=self._dbInfo;dbInfo.serializer.serialize(value,function(value,error){error?reject(error):dbInfo.db.transaction(function(t){t.executeSql("INSERT OR REPLACE INTO "+dbInfo.storeName+" (key, value) VALUES (?, ?)",[key,value],function(){resolve(originalValue)},function(t,error){reject(error)})},function(sqlError){sqlError.code===sqlError.QUOTA_ERR&&reject(sqlError)})})})["catch"](reject)});return executeCallback(promise,callback),promise}function removeItem(key,callback){var self=this;"string"!=typeof key&&(globalObject.console.warn(key+" used as a key, but it is not a string."),key=String(key));var promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){t.executeSql("DELETE FROM "+dbInfo.storeName+" WHERE key = ?",[key],function(){resolve()},function(t,error){reject(error)})})})["catch"](reject)});return executeCallback(promise,callback),promise}function clear(callback){var self=this,promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){t.executeSql("DELETE FROM "+dbInfo.storeName,[],function(){resolve()},function(t,error){reject(error)})})})["catch"](reject)});return executeCallback(promise,callback),promise}function length(callback){var self=this,promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){t.executeSql("SELECT COUNT(key) as c FROM "+dbInfo.storeName,[],function(t,results){var result=results.rows.item(0).c;resolve(result)},function(t,error){reject(error)})})})["catch"](reject)});return executeCallback(promise,callback),promise}function key(n,callback){var self=this,promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){t.executeSql("SELECT key FROM "+dbInfo.storeName+" WHERE id = ? LIMIT 1",[n+1],function(t,results){var result=results.rows.length?results.rows.item(0).key:null;resolve(result)},function(t,error){reject(error)})})})["catch"](reject)});return executeCallback(promise,callback),promise}function keys(callback){var self=this,promise=new Promise(function(resolve,reject){self.ready().then(function(){var dbInfo=self._dbInfo;dbInfo.db.transaction(function(t){t.executeSql("SELECT key FROM "+dbInfo.storeName,[],function(t,results){for(var keys=[],i=0;i<results.rows.length;i++)keys.push(results.rows.item(i).key);resolve(keys)},function(t,error){reject(error)})})})["catch"](reject)});return executeCallback(promise,callback),promise}function executeCallback(promise,callback){callback&&promise.then(function(result){callback(null,result)},function(error){callback(error)})}var globalObject=this,openDatabase=this.openDatabase;if(openDatabase){var webSQLStorage={_driver:"webSQLStorage",_initStorage:_initStorage,iterate:iterate,getItem:getItem,setItem:setItem,removeItem:removeItem,clear:clear,length:length,key:key,keys:keys};exports["default"]=webSQLStorage}}.call("undefined"!=typeof window?window:self),module.exports=exports["default"]}])})}).call(this,require("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:20}],8:[function(require,module,exports){function randomBytes(size){for(var r,r,bytes=new Array(size),i=0;size>i;i++)0==(3&i)&&(r=4294967296*Math.random()),bytes[i]=r>>>((3&i)<<3)&255;return bytes}function byteArrayToBase64(uint8){function tripletToBase64(num){return lookup[num>>18&63]+lookup[num>>12&63]+lookup[num>>6&63]+lookup[63&num]}var temp,length,i,lookup="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",extraBytes=uint8.length%3,output="";for(i=0,length=uint8.length-extraBytes;length>i;i+=3)temp=(uint8[i]<<16)+(uint8[i+1]<<8)+uint8[i+2],output+=tripletToBase64(temp);switch(extraBytes){case 1:temp=uint8[uint8.length-1],output+=lookup[temp>>2],output+=lookup[temp<<4&63],output+="==";break;case 2:temp=(uint8[uint8.length-2]<<8)+uint8[uint8.length-1],output+=lookup[temp>>10],output+=lookup[temp>>4&63],output+=lookup[temp<<2&63],output+="="}return output}function uid(len){return byteArrayToBase64(randomBytes(Math.ceil(Math.max(8,2*len)))).replace(/[+\/]/g,"").slice(0,len)}module.exports.uid=uid},{}],9:[function(require,module,exports){function exists(filename,callback){localforage.getItem(filename,function(err,value){return callback(null!==value?!0:!1)})}function rename(filename,newFilename,callback){localforage.getItem(filename,function(err,value){null===value?localforage.removeItem(newFilename,function(){return callback()}):localforage.setItem(newFilename,value,function(){localforage.removeItem(filename,function(){return callback()})})})}function writeFile(filename,contents,options,callback){"function"==typeof options&&(callback=options),localforage.setItem(filename,contents,function(){return callback()})}function appendFile(filename,toAppend,options,callback){"function"==typeof options&&(callback=options),localforage.getItem(filename,function(err,contents){contents=contents||"",contents+=toAppend,localforage.setItem(filename,contents,function(){return callback()})})}function readFile(filename,options,callback){"function"==typeof options&&(callback=options),localforage.getItem(filename,function(err,contents){return callback(null,contents||"")})}function unlink(filename,callback){localforage.removeItem(filename,function(){return callback()})}function mkdirp(dir,callback){return callback()}function ensureDatafileIntegrity(filename,callback){return callback(null)}var localforage=require("localforage");localforage.config({name:"NeDB",storeName:"nedbdata"}),module.exports.exists=exists,module.exports.rename=rename,module.exports.writeFile=writeFile,module.exports.crashSafeWriteFile=writeFile,module.exports.appendFile=appendFile,module.exports.readFile=readFile,module.exports.unlink=unlink,module.exports.mkdirp=mkdirp,module.exports.ensureDatafileIntegrity=ensureDatafileIntegrity},{localforage:7}],10:[function(require,module,exports){var Datastore=require("./lib/datastore");module.exports=Datastore},{"./lib/datastore":12}],11:[function(require,module,exports){function Cursor(db,query,execFn){this.db=db,this.query=query||{},execFn&&(this.execFn=execFn)}var model=require("./model"),_=require("underscore");Cursor.prototype.limit=function(limit){return this._limit=limit,this},Cursor.prototype.skip=function(skip){return this._skip=skip,this},Cursor.prototype.sort=function(sortQuery){return this._sort=sortQuery,this},Cursor.prototype.projection=function(projection){return this._projection=projection,this},Cursor.prototype.project=function(candidates){var keepId,action,keys,res=[],self=this;return void 0===this._projection||0===Object.keys(this._projection).length?candidates:(keepId=0===this._projection._id?!1:!0,this._projection=_.omit(this._projection,"_id"),keys=Object.keys(this._projection),keys.forEach(function(k){if(void 0!==action&&self._projection[k]!==action)throw"Can't both keep and omit fields except for _id";action=self._projection[k]}),candidates.forEach(function(candidate){var toPush=1===action?_.pick(candidate,keys):_.omit(candidate,keys);keepId?toPush._id=candidate._id:delete toPush._id,res.push(toPush)}),res)},Cursor.prototype._exec=function(callback){var i,keys,key,candidates=this.db.getCandidates(this.query),res=[],added=0,skipped=0,self=this,error=null;try{for(i=0;i<candidates.length;i+=1)if(model.match(candidates[i],this.query))if(this._sort)res.push(candidates[i]);else if(this._skip&&this._skip>skipped)skipped+=1;else if(res.push(candidates[i]),added+=1,this._limit&&this._limit<=added)break}catch(err){return callback(err)}if(this._sort){keys=Object.keys(this._sort);var criteria=[];for(i=0;i<keys.length;i++)key=keys[i],criteria.push({key:key,direction:self._sort[key]});res.sort(function(a,b){var criterion,compare,i;for(i=0;i<criteria.length;i++)if(criterion=criteria[i],compare=criterion.direction*model.compareThings(model.getDotValue(a,criterion.key),model.getDotValue(b,criterion.key)),0!==compare)return compare;return 0});var limit=this._limit||res.length,skip=this._skip||0;res=res.slice(skip,skip+limit)}try{res=this.project(res)}catch(e){error=e,res=void 0}return this.execFn?this.execFn(error,res,callback):callback(error,res)},Cursor.prototype.exec=function(){this.db.executor.push({"this":this,fn:this._exec,arguments:arguments})},module.exports=Cursor},{"./model":15,underscore:18}],12:[function(require,module,exports){function Datastore(options){var filename;"string"==typeof options?(filename=options,this.inMemoryOnly=!1):(options=options||{},filename=options.filename,this.inMemoryOnly=options.inMemoryOnly||!1,this.autoload=options.autoload||!1,this.timestampData=options.timestampData||!1),filename&&"string"==typeof filename&&0!==filename.length?this.filename=filename:(this.filename=null,this.inMemoryOnly=!0),this.persistence=new Persistence({db:this,nodeWebkitAppName:options.nodeWebkitAppName,afterSerialization:options.afterSerialization,beforeDeserialization:options.beforeDeserialization,corruptAlertThreshold:options.corruptAlertThreshold}),this.executor=new Executor,this.inMemoryOnly&&(this.executor.ready=!0),this.indexes={},this.indexes._id=new Index({fieldName:"_id",unique:!0}),this.autoload&&this.loadDatabase(options.onload||function(err){if(err)throw err})}var customUtils=require("./customUtils"),model=require("./model"),async=require("async"),Executor=require("./executor"),Index=require("./indexes"),util=require("util"),_=require("underscore"),Persistence=require("./persistence"),Cursor=require("./cursor");Datastore.prototype.loadDatabase=function(){this.executor.push({"this":this.persistence,fn:this.persistence.loadDatabase,arguments:arguments},!0)},Datastore.prototype.getAllData=function(){return this.indexes._id.getAll()},Datastore.prototype.resetIndexes=function(newData){var self=this;Object.keys(this.indexes).forEach(function(i){self.indexes[i].reset(newData)})},Datastore.prototype.ensureIndex=function(options,cb){var callback=cb||function(){};if(options=options||{},!options.fieldName)return callback({missingFieldName:!0});if(this.indexes[options.fieldName])return callback(null);this.indexes[options.fieldName]=new Index(options);try{this.indexes[options.fieldName].insert(this.getAllData())}catch(e){return delete this.indexes[options.fieldName],callback(e)}this.persistence.persistNewState([{$$indexCreated:options}],function(err){return callback(err?err:null)})},Datastore.prototype.removeIndex=function(fieldName,cb){var callback=cb||function(){};delete this.indexes[fieldName],this.persistence.persistNewState([{$$indexRemoved:fieldName}],function(err){return callback(err?err:null)})},Datastore.prototype.addToIndexes=function(doc){var i,failingIndex,error,keys=Object.keys(this.indexes);for(i=0;i<keys.length;i+=1)try{this.indexes[keys[i]].insert(doc)}catch(e){failingIndex=i,error=e;break}if(error){for(i=0;failingIndex>i;i+=1)this.indexes[keys[i]].remove(doc);throw error}},Datastore.prototype.removeFromIndexes=function(doc){var self=this;Object.keys(this.indexes).forEach(function(i){self.indexes[i].remove(doc)})},Datastore.prototype.updateIndexes=function(oldDoc,newDoc){var i,failingIndex,error,keys=Object.keys(this.indexes);for(i=0;i<keys.length;i+=1)try{this.indexes[keys[i]].update(oldDoc,newDoc)}catch(e){failingIndex=i,error=e;break}if(error){for(i=0;failingIndex>i;i+=1)this.indexes[keys[i]].revertUpdate(oldDoc,newDoc);throw error}},Datastore.prototype.getCandidates=function(query){var usableQueryKeys,indexNames=Object.keys(this.indexes);return usableQueryKeys=[],Object.keys(query).forEach(function(k){("string"==typeof query[k]||"number"==typeof query[k]||"boolean"==typeof query[k]||util.isDate(query[k])||null===query[k])&&usableQueryKeys.push(k)}),usableQueryKeys=_.intersection(usableQueryKeys,indexNames),usableQueryKeys.length>0?this.indexes[usableQueryKeys[0]].getMatching(query[usableQueryKeys[0]]):(usableQueryKeys=[],Object.keys(query).forEach(function(k){query[k]&&query[k].hasOwnProperty("$in")&&usableQueryKeys.push(k)}),usableQueryKeys=_.intersection(usableQueryKeys,indexNames),usableQueryKeys.length>0?this.indexes[usableQueryKeys[0]].getMatching(query[usableQueryKeys[0]].$in):(usableQueryKeys=[],Object.keys(query).forEach(function(k){query[k]&&(query[k].hasOwnProperty("$lt")||query[k].hasOwnProperty("$lte")||query[k].hasOwnProperty("$gt")||query[k].hasOwnProperty("$gte"))&&usableQueryKeys.push(k)}),usableQueryKeys=_.intersection(usableQueryKeys,indexNames),usableQueryKeys.length>0?this.indexes[usableQueryKeys[0]].getBetweenBounds(query[usableQueryKeys[0]]):this.getAllData()))},Datastore.prototype._insert=function(newDoc,cb){var preparedDoc,callback=cb||function(){};try{preparedDoc=this.prepareDocumentForInsertion(newDoc),this._insertInCache(preparedDoc)}catch(e){return callback(e)}this.persistence.persistNewState(util.isArray(preparedDoc)?preparedDoc:[preparedDoc],function(err){return err?callback(err):callback(null,model.deepCopy(preparedDoc))})},Datastore.prototype.createNewId=function(){var tentativeId=customUtils.uid(16);return this.indexes._id.getMatching(tentativeId).length>0&&(tentativeId=this.createNewId()),tentativeId},Datastore.prototype.prepareDocumentForInsertion=function(newDoc){var preparedDoc,self=this;if(util.isArray(newDoc))preparedDoc=[],newDoc.forEach(function(doc){preparedDoc.push(self.prepareDocumentForInsertion(doc))});else{preparedDoc=model.deepCopy(newDoc),void 0===preparedDoc._id&&(preparedDoc._id=this.createNewId());var now=new Date;this.timestampData&&void 0===preparedDoc.createdAt&&(preparedDoc.createdAt=now),this.timestampData&&void 0===preparedDoc.updatedAt&&(preparedDoc.updatedAt=now),model.checkObject(preparedDoc)}return preparedDoc},Datastore.prototype._insertInCache=function(preparedDoc){util.isArray(preparedDoc)?this._insertMultipleDocsInCache(preparedDoc):this.addToIndexes(preparedDoc)},Datastore.prototype._insertMultipleDocsInCache=function(preparedDocs){var i,failingI,error;for(i=0;i<preparedDocs.length;i+=1)try{this.addToIndexes(preparedDocs[i])}catch(e){error=e,failingI=i;break}if(error){for(i=0;failingI>i;i+=1)this.removeFromIndexes(preparedDocs[i]);throw error}},Datastore.prototype.insert=function(){this.executor.push({"this":this,fn:this._insert,arguments:arguments})},Datastore.prototype.count=function(query,callback){var cursor=new Cursor(this,query,function(err,docs,callback){return err?callback(err):callback(null,docs.length)});return"function"!=typeof callback?cursor:void cursor.exec(callback)},Datastore.prototype.find=function(query,projection,callback){switch(arguments.length){case 1:projection={};break;case 2:"function"==typeof projection&&(callback=projection,projection={})}var cursor=new Cursor(this,query,function(err,docs,callback){var i,res=[];if(err)return callback(err);for(i=0;i<docs.length;i+=1)res.push(model.deepCopy(docs[i]));return callback(null,res)});return cursor.projection(projection),"function"!=typeof callback?cursor:void cursor.exec(callback)},Datastore.prototype.findOne=function(query,projection,callback){switch(arguments.length){case 1:projection={};break;case 2:"function"==typeof projection&&(callback=projection,projection={})}var cursor=new Cursor(this,query,function(err,docs,callback){return err?callback(err):1===docs.length?callback(null,model.deepCopy(docs[0])):callback(null,null)});return cursor.projection(projection).limit(1),"function"!=typeof callback?cursor:void cursor.exec(callback)},Datastore.prototype._update=function(query,updateQuery,options,cb){var callback,multi,upsert,i,self=this,numReplaced=0;"function"==typeof options&&(cb=options,options={}),callback=cb||function(){},multi=void 0!==options.multi?options.multi:!1,upsert=void 0!==options.upsert?options.upsert:!1,async.waterfall([function(cb){if(!upsert)return cb();var cursor=new Cursor(self,query);cursor.limit(1)._exec(function(err,docs){if(err)return callback(err);if(1===docs.length)return cb();var toBeInserted;try{model.checkObject(updateQuery),toBeInserted=updateQuery}catch(e){try{toBeInserted=model.modify(model.deepCopy(query,!0),updateQuery)}catch(err){return callback(err)}}return self._insert(toBeInserted,function(err,newDoc){return err?callback(err):callback(null,1,newDoc)})})},function(){var modifiedDoc,candidates=self.getCandidates(query),modifications=[];try{for(i=0;i<candidates.length;i+=1)model.match(candidates[i],query)&&(multi||0===numReplaced)&&(numReplaced+=1,modifiedDoc=model.modify(candidates[i],updateQuery),self.timestampData&&(modifiedDoc.updatedAt=new Date),modifications.push({oldDoc:candidates[i],newDoc:modifiedDoc}))}catch(err){return callback(err)}try{self.updateIndexes(modifications)}catch(err){return callback(err)}self.persistence.persistNewState(_.pluck(modifications,"newDoc"),function(err){return err?callback(err):callback(null,numReplaced)})}])},Datastore.prototype.update=function(){this.executor.push({"this":this,fn:this._update,arguments:arguments})},Datastore.prototype._remove=function(query,options,cb){var callback,multi,self=this,numRemoved=0,removedDocs=[],candidates=this.getCandidates(query);"function"==typeof options&&(cb=options,options={}),callback=cb||function(){},multi=void 0!==options.multi?options.multi:!1;try{candidates.forEach(function(d){model.match(d,query)&&(multi||0===numRemoved)&&(numRemoved+=1,removedDocs.push({$$deleted:!0,_id:d._id}),self.removeFromIndexes(d))})}catch(err){return callback(err)}self.persistence.persistNewState(removedDocs,function(err){return err?callback(err):callback(null,numRemoved)})},Datastore.prototype.remove=function(){this.executor.push({"this":this,fn:this._remove,arguments:arguments})},module.exports=Datastore},{"./cursor":11,"./customUtils":8,"./executor":13,"./indexes":14,"./model":15,"./persistence":16,async:17,underscore:18,util:22}],13:[function(require,module,exports){(function(process){function Executor(){this.buffer=[],this.ready=!1,this.queue=async.queue(function(task,cb){var callback,i,lastArg=task.arguments[task.arguments.length-1],newArguments=[];for(i=0;i<task.arguments.length;i+=1)newArguments.push(task.arguments[i]);"function"==typeof lastArg?(callback=function(){"function"==typeof setImmediate?setImmediate(cb):process.nextTick(cb),lastArg.apply(null,arguments)},newArguments[newArguments.length-1]=callback):(callback=function(){cb()},newArguments.push(callback)),task.fn.apply(task["this"],newArguments)},1)}var async=require("async");Executor.prototype.push=function(task,forceQueuing){this.ready||forceQueuing?this.queue.push(task):this.buffer.push(task)},Executor.prototype.processBuffer=function(){var i;for(this.ready=!0,i=0;i<this.buffer.length;i+=1)this.queue.push(this.buffer[i]);this.buffer=[]},module.exports=Executor}).call(this,require("_process"))},{_process:20,async:17}],14:[function(require,module,exports){function checkValueEquality(a,b){return a===b}function projectForUnique(elt){return null===elt?"$null":"string"==typeof elt?"$string"+elt:"boolean"==typeof elt?"$boolean"+elt:"number"==typeof elt?"$number"+elt:util.isArray(elt)?"$date"+elt.getTime():elt}function Index(options){this.fieldName=options.fieldName,this.unique=options.unique||!1,this.sparse=options.sparse||!1,this.treeOptions={unique:this.unique,compareKeys:model.compareThings,checkValueEquality:checkValueEquality},this.reset()}var BinarySearchTree=require("binary-search-tree").AVLTree,model=require("./model"),_=require("underscore"),util=require("util");Index.prototype.reset=function(newData){this.tree=new BinarySearchTree(this.treeOptions),newData&&this.insert(newData)},Index.prototype.insert=function(doc){var key,keys,i,failingI,error;if(util.isArray(doc))return void this.insertMultipleDocs(doc);if(key=model.getDotValue(doc,this.fieldName),void 0!==key||!this.sparse)if(util.isArray(key)){for(keys=_.uniq(key,projectForUnique),i=0;i<keys.length;i+=1)try{this.tree.insert(keys[i],doc)}catch(e){error=e,failingI=i;break}if(error){for(i=0;failingI>i;i+=1)this.tree["delete"](keys[i],doc);throw error}}else this.tree.insert(key,doc)},Index.prototype.insertMultipleDocs=function(docs){var i,error,failingI;for(i=0;i<docs.length;i+=1)try{this.insert(docs[i])}catch(e){error=e,failingI=i;break}if(error){for(i=0;failingI>i;i+=1)this.remove(docs[i]);throw error}},Index.prototype.remove=function(doc){var key,self=this;return util.isArray(doc)?void doc.forEach(function(d){self.remove(d)}):(key=model.getDotValue(doc,this.fieldName),void(void 0===key&&this.sparse||(util.isArray(key)?_.uniq(key,projectForUnique).forEach(function(_key){self.tree["delete"](_key,doc)}):this.tree["delete"](key,doc))))},Index.prototype.update=function(oldDoc,newDoc){if(util.isArray(oldDoc))return void this.updateMultipleDocs(oldDoc);this.remove(oldDoc);try{this.insert(newDoc)}catch(e){throw this.insert(oldDoc),e}},Index.prototype.updateMultipleDocs=function(pairs){var i,failingI,error;for(i=0;i<pairs.length;i+=1)this.remove(pairs[i].oldDoc);for(i=0;i<pairs.length;i+=1)try{this.insert(pairs[i].newDoc)}catch(e){error=e,failingI=i;break}if(error){
for(i=0;failingI>i;i+=1)this.remove(pairs[i].newDoc);for(i=0;i<pairs.length;i+=1)this.insert(pairs[i].oldDoc);throw error}},Index.prototype.revertUpdate=function(oldDoc,newDoc){var revert=[];util.isArray(oldDoc)?(oldDoc.forEach(function(pair){revert.push({oldDoc:pair.newDoc,newDoc:pair.oldDoc})}),this.update(revert)):this.update(newDoc,oldDoc)},Index.prototype.getMatching=function(value){var self=this;if(util.isArray(value)){var _res={},res=[];return value.forEach(function(v){self.getMatching(v).forEach(function(doc){_res[doc._id]=doc})}),Object.keys(_res).forEach(function(_id){res.push(_res[_id])}),res}return this.tree.search(value)},Index.prototype.getBetweenBounds=function(query){return this.tree.betweenBounds(query)},Index.prototype.getAll=function(){var res=[];return this.tree.executeOnEveryNode(function(node){var i;for(i=0;i<node.data.length;i+=1)res.push(node.data[i])}),res},module.exports=Index},{"./model":15,"binary-search-tree":1,underscore:18,util:22}],15:[function(require,module,exports){function checkKey(k,v){if("number"==typeof k&&(k=k.toString()),!("$"!==k[0]||"$$date"===k&&"number"==typeof v||"$$deleted"===k&&v===!0||"$$indexCreated"===k||"$$indexRemoved"===k))throw"Field names cannot begin with the $ character";if(-1!==k.indexOf("."))throw"Field names cannot contain a ."}function checkObject(obj){util.isArray(obj)&&obj.forEach(function(o){checkObject(o)}),"object"==typeof obj&&null!==obj&&Object.keys(obj).forEach(function(k){checkKey(k,obj[k]),checkObject(obj[k])})}function serialize(obj){var res;return res=JSON.stringify(obj,function(k,v){return checkKey(k,v),void 0!==v?null===v?null:"function"==typeof this[k].getTime?{$$date:this[k].getTime()}:v:void 0})}function deserialize(rawData){return JSON.parse(rawData,function(k,v){return"$$date"===k?new Date(v):"string"==typeof v||"number"==typeof v||"boolean"==typeof v||null===v?v:v&&v.$$date?v.$$date:v})}function deepCopy(obj,strictKeys){var res;return"boolean"==typeof obj||"number"==typeof obj||"string"==typeof obj||null===obj||util.isDate(obj)?obj:util.isArray(obj)?(res=[],obj.forEach(function(o){res.push(deepCopy(o,strictKeys))}),res):"object"==typeof obj?(res={},Object.keys(obj).forEach(function(k){(!strictKeys||"$"!==k[0]&&-1===k.indexOf("."))&&(res[k]=deepCopy(obj[k],strictKeys))}),res):void 0}function isPrimitiveType(obj){return"boolean"==typeof obj||"number"==typeof obj||"string"==typeof obj||null===obj||util.isDate(obj)||util.isArray(obj)}function compareNSB(a,b){return b>a?-1:a>b?1:0}function compareArrays(a,b){var i,comp;for(i=0;i<Math.min(a.length,b.length);i+=1)if(comp=compareThings(a[i],b[i]),0!==comp)return comp;return compareNSB(a.length,b.length)}function compareThings(a,b){var aKeys,bKeys,comp,i;if(void 0===a)return void 0===b?0:-1;if(void 0===b)return void 0===a?0:1;if(null===a)return null===b?0:-1;if(null===b)return null===a?0:1;if("number"==typeof a)return"number"==typeof b?compareNSB(a,b):-1;if("number"==typeof b)return"number"==typeof a?compareNSB(a,b):1;if("string"==typeof a)return"string"==typeof b?compareNSB(a,b):-1;if("string"==typeof b)return"string"==typeof a?compareNSB(a,b):1;if("boolean"==typeof a)return"boolean"==typeof b?compareNSB(a,b):-1;if("boolean"==typeof b)return"boolean"==typeof a?compareNSB(a,b):1;if(util.isDate(a))return util.isDate(b)?compareNSB(a.getTime(),b.getTime()):-1;if(util.isDate(b))return util.isDate(a)?compareNSB(a.getTime(),b.getTime()):1;if(util.isArray(a))return util.isArray(b)?compareArrays(a,b):-1;if(util.isArray(b))return util.isArray(a)?compareArrays(a,b):1;for(aKeys=Object.keys(a).sort(),bKeys=Object.keys(b).sort(),i=0;i<Math.min(aKeys.length,bKeys.length);i+=1)if(comp=compareThings(a[aKeys[i]],b[bKeys[i]]),0!==comp)return comp;return compareNSB(aKeys.length,bKeys.length)}function createModifierFunction(modifier){return function(obj,field,value){var fieldParts="string"==typeof field?field.split("."):field;1===fieldParts.length?lastStepModifierFunctions[modifier](obj,field,value):(obj[fieldParts[0]]=obj[fieldParts[0]]||{},modifierFunctions[modifier](obj[fieldParts[0]],fieldParts.slice(1),value))}}function modify(obj,updateQuery){var newDoc,modifiers,keys=Object.keys(updateQuery),firstChars=_.map(keys,function(item){return item[0]}),dollarFirstChars=_.filter(firstChars,function(c){return"$"===c});if(-1!==keys.indexOf("_id")&&updateQuery._id!==obj._id)throw"You cannot change a document's _id";if(0!==dollarFirstChars.length&&dollarFirstChars.length!==firstChars.length)throw"You cannot mix modifiers and normal fields";if(0===dollarFirstChars.length?(newDoc=deepCopy(updateQuery),newDoc._id=obj._id):(modifiers=_.uniq(keys),newDoc=deepCopy(obj),modifiers.forEach(function(m){var keys;if(!modifierFunctions[m])throw"Unknown modifier "+m;if("object"!=typeof updateQuery[m])throw"Modifier "+m+"'s argument must be an object";keys=Object.keys(updateQuery[m]),keys.forEach(function(k){modifierFunctions[m](newDoc,k,updateQuery[m][k])})})),checkObject(newDoc),obj._id!==newDoc._id)throw"You can't change a document's _id";return newDoc}function getDotValue(obj,field){var i,objs,fieldParts="string"==typeof field?field.split("."):field;if(obj){if(0===fieldParts.length)return obj;if(1===fieldParts.length)return obj[fieldParts[0]];if(util.isArray(obj[fieldParts[0]])){if(i=parseInt(fieldParts[1],10),"number"==typeof i&&!isNaN(i))return getDotValue(obj[fieldParts[0]][i],fieldParts.slice(2));for(objs=new Array,i=0;i<obj[fieldParts[0]].length;i+=1)objs.push(getDotValue(obj[fieldParts[0]][i],fieldParts.slice(1)));return objs}return getDotValue(obj[fieldParts[0]],fieldParts.slice(1))}}function areThingsEqual(a,b){var aKeys,bKeys,i;if(null===a||"string"==typeof a||"boolean"==typeof a||"number"==typeof a||null===b||"string"==typeof b||"boolean"==typeof b||"number"==typeof b)return a===b;if(util.isDate(a)||util.isDate(b))return util.isDate(a)&&util.isDate(b)&&a.getTime()===b.getTime();if(util.isArray(a)||util.isArray(b)||void 0===a||void 0===b)return!1;try{aKeys=Object.keys(a),bKeys=Object.keys(b)}catch(e){return!1}if(aKeys.length!==bKeys.length)return!1;for(i=0;i<aKeys.length;i+=1){if(-1===bKeys.indexOf(aKeys[i]))return!1;if(!areThingsEqual(a[aKeys[i]],b[aKeys[i]]))return!1}return!0}function areComparable(a,b){return"string"==typeof a||"number"==typeof a||util.isDate(a)||"string"==typeof b||"number"==typeof b||util.isDate(b)?typeof a!=typeof b?!1:!0:!1}function match(obj,query){var queryKeys,queryKey,queryValue,i;if(isPrimitiveType(obj)||isPrimitiveType(query))return matchQueryPart({needAKey:obj},"needAKey",query);for(queryKeys=Object.keys(query),i=0;i<queryKeys.length;i+=1)if(queryKey=queryKeys[i],queryValue=query[queryKey],"$"===queryKey[0]){if(!logicalOperators[queryKey])throw"Unknown logical operator "+queryKey;if(!logicalOperators[queryKey](obj,queryValue))return!1}else if(!matchQueryPart(obj,queryKey,queryValue))return!1;return!0}function matchQueryPart(obj,queryKey,queryValue,treatObjAsValue){var i,keys,firstChars,dollarFirstChars,objValue=getDotValue(obj,queryKey);if(util.isArray(objValue)&&!treatObjAsValue){if(null!==queryValue&&"object"==typeof queryValue&&!util.isRegExp(queryValue))for(keys=Object.keys(queryValue),i=0;i<keys.length;i+=1)if(arrayComparisonFunctions[keys[i]])return matchQueryPart(obj,queryKey,queryValue,!0);for(i=0;i<objValue.length;i+=1)if(matchQueryPart({k:objValue[i]},"k",queryValue))return!0;return!1}if(null!==queryValue&&"object"==typeof queryValue&&!util.isRegExp(queryValue)){if(keys=Object.keys(queryValue),firstChars=_.map(keys,function(item){return item[0]}),dollarFirstChars=_.filter(firstChars,function(c){return"$"===c}),0!==dollarFirstChars.length&&dollarFirstChars.length!==firstChars.length)throw"You cannot mix operators and normal fields";if(dollarFirstChars.length>0){for(i=0;i<keys.length;i+=1){if(!comparisonFunctions[keys[i]])throw"Unknown comparison function "+keys[i];if(!comparisonFunctions[keys[i]](objValue,queryValue[keys[i]]))return!1}return!0}}return util.isRegExp(queryValue)?comparisonFunctions.$regex(objValue,queryValue):areThingsEqual(objValue,queryValue)?!0:!1}var util=require("util"),_=require("underscore"),modifierFunctions={},lastStepModifierFunctions={},comparisonFunctions={},logicalOperators={},arrayComparisonFunctions={};lastStepModifierFunctions.$set=function(obj,field,value){obj[field]=value},lastStepModifierFunctions.$unset=function(obj,field,value){delete obj[field]},lastStepModifierFunctions.$push=function(obj,field,value){if(obj.hasOwnProperty(field)||(obj[field]=[]),!util.isArray(obj[field]))throw"Can't $push an element on non-array values";if(null!==value&&"object"==typeof value&&value.$each){if(Object.keys(value).length>1)throw"Can't use another field in conjunction with $each";if(!util.isArray(value.$each))throw"$each requires an array value";value.$each.forEach(function(v){obj[field].push(v)})}else obj[field].push(value)},lastStepModifierFunctions.$addToSet=function(obj,field,value){var addToSet=!0;if(obj.hasOwnProperty(field)||(obj[field]=[]),!util.isArray(obj[field]))throw"Can't $addToSet an element on non-array values";if(null!==value&&"object"==typeof value&&value.$each){if(Object.keys(value).length>1)throw"Can't use another field in conjunction with $each";if(!util.isArray(value.$each))throw"$each requires an array value";value.$each.forEach(function(v){lastStepModifierFunctions.$addToSet(obj,field,v)})}else obj[field].forEach(function(v){0===compareThings(v,value)&&(addToSet=!1)}),addToSet&&obj[field].push(value)},lastStepModifierFunctions.$pop=function(obj,field,value){if(!util.isArray(obj[field]))throw"Can't $pop an element from non-array values";if("number"!=typeof value)throw value+" isn't an integer, can't use it with $pop";0!==value&&(value>0?obj[field]=obj[field].slice(0,obj[field].length-1):obj[field]=obj[field].slice(1))},lastStepModifierFunctions.$pull=function(obj,field,value){var arr,i;if(!util.isArray(obj[field]))throw"Can't $pull an element from non-array values";for(arr=obj[field],i=arr.length-1;i>=0;i-=1)match(arr[i],value)&&arr.splice(i,1)},lastStepModifierFunctions.$inc=function(obj,field,value){if("number"!=typeof value)throw value+" must be a number";if("number"!=typeof obj[field]){if(_.has(obj,field))throw"Don't use the $inc modifier on non-number fields";obj[field]=value}else obj[field]+=value},Object.keys(lastStepModifierFunctions).forEach(function(modifier){modifierFunctions[modifier]=createModifierFunction(modifier)}),comparisonFunctions.$lt=function(a,b){return areComparable(a,b)&&b>a},comparisonFunctions.$lte=function(a,b){return areComparable(a,b)&&b>=a},comparisonFunctions.$gt=function(a,b){return areComparable(a,b)&&a>b},comparisonFunctions.$gte=function(a,b){return areComparable(a,b)&&a>=b},comparisonFunctions.$ne=function(a,b){return void 0===a?!0:!areThingsEqual(a,b)},comparisonFunctions.$in=function(a,b){var i;if(!util.isArray(b))throw"$in operator called with a non-array";for(i=0;i<b.length;i+=1)if(areThingsEqual(a,b[i]))return!0;return!1},comparisonFunctions.$nin=function(a,b){if(!util.isArray(b))throw"$nin operator called with a non-array";return!comparisonFunctions.$in(a,b)},comparisonFunctions.$regex=function(a,b){if(!util.isRegExp(b))throw"$regex operator called with non regular expression";return"string"!=typeof a?!1:b.test(a)},comparisonFunctions.$exists=function(value,exists){return exists=exists||""===exists?!0:!1,void 0===value?!exists:exists},comparisonFunctions.$size=function(obj,value){if(!util.isArray(obj))return!1;if(value%1!==0)throw"$size operator called without an integer";return obj.length==value},arrayComparisonFunctions.$size=!0,logicalOperators.$or=function(obj,query){var i;if(!util.isArray(query))throw"$or operator used without an array";for(i=0;i<query.length;i+=1)if(match(obj,query[i]))return!0;return!1},logicalOperators.$and=function(obj,query){var i;if(!util.isArray(query))throw"$and operator used without an array";for(i=0;i<query.length;i+=1)if(!match(obj,query[i]))return!1;return!0},logicalOperators.$not=function(obj,query){return!match(obj,query)},logicalOperators.$where=function(obj,fn){var result;if(!_.isFunction(fn))throw"$where operator used without a function";if(result=fn.call(obj),!_.isBoolean(result))throw"$where function must return boolean";return result},module.exports.serialize=serialize,module.exports.deserialize=deserialize,module.exports.deepCopy=deepCopy,module.exports.checkObject=checkObject,module.exports.isPrimitiveType=isPrimitiveType,module.exports.modify=modify,module.exports.getDotValue=getDotValue,module.exports.match=match,module.exports.areThingsEqual=areThingsEqual,module.exports.compareThings=compareThings},{underscore:18,util:22}],16:[function(require,module,exports){(function(process){function Persistence(options){var i,j,randomString;if(this.db=options.db,this.inMemoryOnly=this.db.inMemoryOnly,this.filename=this.db.filename,this.corruptAlertThreshold=void 0!==options.corruptAlertThreshold?options.corruptAlertThreshold:.1,!this.inMemoryOnly&&this.filename&&"~"===this.filename.charAt(this.filename.length-1))throw"The datafile name can't end with a ~, which is reserved for crash safe backup files";if(options.afterSerialization&&!options.beforeDeserialization)throw"Serialization hook defined but deserialization hook undefined, cautiously refusing to start NeDB to prevent dataloss";if(!options.afterSerialization&&options.beforeDeserialization)throw"Serialization hook undefined but deserialization hook defined, cautiously refusing to start NeDB to prevent dataloss";for(this.afterSerialization=options.afterSerialization||function(s){return s},this.beforeDeserialization=options.beforeDeserialization||function(s){return s},i=1;30>i;i+=1)for(j=0;10>j;j+=1)if(randomString=customUtils.uid(i),this.beforeDeserialization(this.afterSerialization(randomString))!==randomString)throw"beforeDeserialization is not the reverse of afterSerialization, cautiously refusing to start NeDB to prevent dataloss";this.filename&&options.nodeWebkitAppName&&(console.log("=================================================================="),console.log("WARNING: The nodeWebkitAppName option is deprecated"),console.log("To get the path to the directory where Node Webkit stores the data"),console.log("for your app, use the internal nw.gui module like this"),console.log("require('nw.gui').App.dataPath"),console.log("See https://github.com/rogerwang/node-webkit/issues/500"),console.log("=================================================================="),this.filename=Persistence.getNWAppFilename(options.nodeWebkitAppName,this.filename))}var storage=require("./storage"),path=require("path"),model=require("./model"),async=require("async"),customUtils=require("./customUtils"),Index=require("./indexes");Persistence.ensureDirectoryExists=function(dir,cb){var callback=cb||function(){};storage.mkdirp(dir,function(err){return callback(err)})},Persistence.getNWAppFilename=function(appName,relativeFilename){var home;switch(process.platform){case"win32":case"win64":if(home=process.env.LOCALAPPDATA||process.env.APPDATA,!home)throw"Couldn't find the base application data folder";home=path.join(home,appName);break;case"darwin":if(home=process.env.HOME,!home)throw"Couldn't find the base application data directory";home=path.join(home,"Library","Application Support",appName);break;case"linux":if(home=process.env.HOME,!home)throw"Couldn't find the base application data directory";home=path.join(home,".config",appName);break;default:throw"Can't use the Node Webkit relative path for platform "+process.platform}return path.join(home,"nedb-data",relativeFilename)},Persistence.prototype.persistCachedDatabase=function(cb){var callback=cb||function(){},toPersist="",self=this;return this.inMemoryOnly?callback(null):(this.db.getAllData().forEach(function(doc){toPersist+=self.afterSerialization(model.serialize(doc))+"\n"}),Object.keys(this.db.indexes).forEach(function(fieldName){"_id"!=fieldName&&(toPersist+=self.afterSerialization(model.serialize({$$indexCreated:{fieldName:fieldName,unique:self.db.indexes[fieldName].unique,sparse:self.db.indexes[fieldName].sparse}}))+"\n")}),void storage.crashSafeWriteFile(this.filename,toPersist,callback))},Persistence.prototype.compactDatafile=function(){this.db.executor.push({"this":this,fn:this.persistCachedDatabase,arguments:[]})},Persistence.prototype.setAutocompactionInterval=function(interval){var self=this,minInterval=5e3,realInterval=Math.max(interval||0,minInterval);this.stopAutocompaction(),this.autocompactionIntervalId=setInterval(function(){self.compactDatafile()},realInterval)},Persistence.prototype.stopAutocompaction=function(){this.autocompactionIntervalId&&clearInterval(this.autocompactionIntervalId)},Persistence.prototype.persistNewState=function(newDocs,cb){var self=this,toPersist="",callback=cb||function(){};return self.inMemoryOnly?callback(null):(newDocs.forEach(function(doc){toPersist+=self.afterSerialization(model.serialize(doc))+"\n"}),0===toPersist.length?callback(null):void storage.appendFile(self.filename,toPersist,"utf8",function(err){return callback(err)}))},Persistence.prototype.treatRawData=function(rawData){var i,data=rawData.split("\n"),dataById={},tdata=[],indexes={},corruptItems=-1;for(i=0;i<data.length;i+=1){var doc;try{doc=model.deserialize(this.beforeDeserialization(data[i])),doc._id?doc.$$deleted===!0?delete dataById[doc._id]:dataById[doc._id]=doc:doc.$$indexCreated&&void 0!=doc.$$indexCreated.fieldName?indexes[doc.$$indexCreated.fieldName]=doc.$$indexCreated:"string"==typeof doc.$$indexRemoved&&delete indexes[doc.$$indexRemoved]}catch(e){corruptItems+=1}}if(data.length>0&&corruptItems/data.length>this.corruptAlertThreshold)throw"More than 10% of the data file is corrupt, the wrong beforeDeserialization hook may be used. Cautiously refusing to start NeDB to prevent dataloss";return Object.keys(dataById).forEach(function(k){tdata.push(dataById[k])}),{data:tdata,indexes:indexes}},Persistence.prototype.loadDatabase=function(cb){var callback=cb||function(){},self=this;return self.db.resetIndexes(),self.inMemoryOnly?callback(null):void async.waterfall([function(cb){Persistence.ensureDirectoryExists(path.dirname(self.filename),function(err){storage.ensureDatafileIntegrity(self.filename,function(err){storage.readFile(self.filename,"utf8",function(err,rawData){if(err)return cb(err);try{var treatedData=self.treatRawData(rawData)}catch(e){return cb(e)}Object.keys(treatedData.indexes).forEach(function(key){self.db.indexes[key]=new Index(treatedData.indexes[key])});try{self.db.resetIndexes(treatedData.data)}catch(e){return self.db.resetIndexes(),cb(e)}self.db.persistence.persistCachedDatabase(cb)})})})}],function(err){return err?callback(err):(self.db.executor.processBuffer(),callback(null))})},module.exports=Persistence}).call(this,require("_process"))},{"./customUtils":8,"./indexes":14,"./model":15,"./storage":9,_process:20,async:17,path:19}],17:[function(require,module,exports){(function(process){!function(){function only_once(fn){var called=!1;return function(){if(called)throw new Error("Callback was already called.");called=!0,fn.apply(root,arguments)}}var root,previous_async,async={};root=this,null!=root&&(previous_async=root.async),async.noConflict=function(){return root.async=previous_async,async};var _each=function(arr,iterator){if(arr.forEach)return arr.forEach(iterator);for(var i=0;i<arr.length;i+=1)iterator(arr[i],i,arr)},_map=function(arr,iterator){if(arr.map)return arr.map(iterator);var results=[];return _each(arr,function(x,i,a){results.push(iterator(x,i,a))}),results},_reduce=function(arr,iterator,memo){return arr.reduce?arr.reduce(iterator,memo):(_each(arr,function(x,i,a){memo=iterator(memo,x,i,a)}),memo)},_keys=function(obj){if(Object.keys)return Object.keys(obj);var keys=[];for(var k in obj)obj.hasOwnProperty(k)&&keys.push(k);return keys};"undefined"!=typeof process&&process.nextTick?(async.nextTick=process.nextTick,"undefined"!=typeof setImmediate?async.setImmediate=function(fn){setImmediate(fn)}:async.setImmediate=async.nextTick):"function"==typeof setImmediate?(async.nextTick=function(fn){setImmediate(fn)},async.setImmediate=async.nextTick):(async.nextTick=function(fn){setTimeout(fn,0)},async.setImmediate=async.nextTick),async.each=function(arr,iterator,callback){if(callback=callback||function(){},!arr.length)return callback();var completed=0;_each(arr,function(x){iterator(x,only_once(function(err){err?(callback(err),callback=function(){}):(completed+=1,completed>=arr.length&&callback(null))}))})},async.forEach=async.each,async.eachSeries=function(arr,iterator,callback){if(callback=callback||function(){},!arr.length)return callback();var completed=0,iterate=function(){iterator(arr[completed],function(err){err?(callback(err),callback=function(){}):(completed+=1,completed>=arr.length?callback(null):iterate())})};iterate()},async.forEachSeries=async.eachSeries,async.eachLimit=function(arr,limit,iterator,callback){var fn=_eachLimit(limit);fn.apply(null,[arr,iterator,callback])},async.forEachLimit=async.eachLimit;var _eachLimit=function(limit){return function(arr,iterator,callback){if(callback=callback||function(){},!arr.length||0>=limit)return callback();var completed=0,started=0,running=0;!function replenish(){if(completed>=arr.length)return callback();for(;limit>running&&started<arr.length;)started+=1,running+=1,iterator(arr[started-1],function(err){err?(callback(err),callback=function(){}):(completed+=1,running-=1,completed>=arr.length?callback():replenish())})}()}},doParallel=function(fn){return function(){var args=Array.prototype.slice.call(arguments);return fn.apply(null,[async.each].concat(args))}},doParallelLimit=function(limit,fn){return function(){var args=Array.prototype.slice.call(arguments);return fn.apply(null,[_eachLimit(limit)].concat(args))}},doSeries=function(fn){return function(){var args=Array.prototype.slice.call(arguments);return fn.apply(null,[async.eachSeries].concat(args))}},_asyncMap=function(eachfn,arr,iterator,callback){var results=[];arr=_map(arr,function(x,i){return{index:i,value:x}}),eachfn(arr,function(x,callback){iterator(x.value,function(err,v){results[x.index]=v,callback(err)})},function(err){callback(err,results)})};async.map=doParallel(_asyncMap),async.mapSeries=doSeries(_asyncMap),async.mapLimit=function(arr,limit,iterator,callback){return _mapLimit(limit)(arr,iterator,callback)};var _mapLimit=function(limit){return doParallelLimit(limit,_asyncMap)};async.reduce=function(arr,memo,iterator,callback){async.eachSeries(arr,function(x,callback){iterator(memo,x,function(err,v){memo=v,callback(err)})},function(err){callback(err,memo)})},async.inject=async.reduce,async.foldl=async.reduce,async.reduceRight=function(arr,memo,iterator,callback){var reversed=_map(arr,function(x){return x}).reverse();async.reduce(reversed,memo,iterator,callback)},async.foldr=async.reduceRight;var _filter=function(eachfn,arr,iterator,callback){var results=[];arr=_map(arr,function(x,i){return{index:i,value:x}}),eachfn(arr,function(x,callback){iterator(x.value,function(v){v&&results.push(x),callback()})},function(err){callback(_map(results.sort(function(a,b){return a.index-b.index}),function(x){return x.value}))})};async.filter=doParallel(_filter),async.filterSeries=doSeries(_filter),async.select=async.filter,async.selectSeries=async.filterSeries;var _reject=function(eachfn,arr,iterator,callback){var results=[];arr=_map(arr,function(x,i){return{index:i,value:x}}),eachfn(arr,function(x,callback){iterator(x.value,function(v){v||results.push(x),callback()})},function(err){callback(_map(results.sort(function(a,b){return a.index-b.index}),function(x){return x.value}))})};async.reject=doParallel(_reject),async.rejectSeries=doSeries(_reject);var _detect=function(eachfn,arr,iterator,main_callback){eachfn(arr,function(x,callback){iterator(x,function(result){result?(main_callback(x),main_callback=function(){}):callback()})},function(err){main_callback()})};async.detect=doParallel(_detect),async.detectSeries=doSeries(_detect),async.some=function(arr,iterator,main_callback){async.each(arr,function(x,callback){iterator(x,function(v){v&&(main_callback(!0),main_callback=function(){}),callback()})},function(err){main_callback(!1)})},async.any=async.some,async.every=function(arr,iterator,main_callback){async.each(arr,function(x,callback){iterator(x,function(v){v||(main_callback(!1),main_callback=function(){}),callback()})},function(err){main_callback(!0)})},async.all=async.every,async.sortBy=function(arr,iterator,callback){async.map(arr,function(x,callback){iterator(x,function(err,criteria){err?callback(err):callback(null,{value:x,criteria:criteria})})},function(err,results){if(err)return callback(err);var fn=function(left,right){var a=left.criteria,b=right.criteria;return b>a?-1:a>b?1:0};callback(null,_map(results.sort(fn),function(x){return x.value}))})},async.auto=function(tasks,callback){callback=callback||function(){};var keys=_keys(tasks);if(!keys.length)return callback(null);var results={},listeners=[],addListener=function(fn){listeners.unshift(fn)},removeListener=function(fn){for(var i=0;i<listeners.length;i+=1)if(listeners[i]===fn)return void listeners.splice(i,1)},taskComplete=function(){_each(listeners.slice(0),function(fn){fn()})};addListener(function(){_keys(results).length===keys.length&&(callback(null,results),callback=function(){})}),_each(keys,function(k){var task=tasks[k]instanceof Function?[tasks[k]]:tasks[k],taskCallback=function(err){var args=Array.prototype.slice.call(arguments,1);if(args.length<=1&&(args=args[0]),err){var safeResults={};_each(_keys(results),function(rkey){safeResults[rkey]=results[rkey]}),safeResults[k]=args,callback(err,safeResults),callback=function(){}}else results[k]=args,async.setImmediate(taskComplete)},requires=task.slice(0,Math.abs(task.length-1))||[],ready=function(){return _reduce(requires,function(a,x){return a&&results.hasOwnProperty(x)},!0)&&!results.hasOwnProperty(k)};if(ready())task[task.length-1](taskCallback,results);else{var listener=function(){ready()&&(removeListener(listener),task[task.length-1](taskCallback,results))};addListener(listener)}})},async.waterfall=function(tasks,callback){if(callback=callback||function(){},tasks.constructor!==Array){var err=new Error("First argument to waterfall must be an array of functions");return callback(err)}if(!tasks.length)return callback();var wrapIterator=function(iterator){return function(err){if(err)callback.apply(null,arguments),callback=function(){};else{var args=Array.prototype.slice.call(arguments,1),next=iterator.next();next?args.push(wrapIterator(next)):args.push(callback),async.setImmediate(function(){iterator.apply(null,args)})}}};wrapIterator(async.iterator(tasks))()};var _parallel=function(eachfn,tasks,callback){if(callback=callback||function(){},tasks.constructor===Array)eachfn.map(tasks,function(fn,callback){fn&&fn(function(err){var args=Array.prototype.slice.call(arguments,1);args.length<=1&&(args=args[0]),callback.call(null,err,args)})},callback);else{var results={};eachfn.each(_keys(tasks),function(k,callback){tasks[k](function(err){var args=Array.prototype.slice.call(arguments,1);args.length<=1&&(args=args[0]),results[k]=args,callback(err)})},function(err){callback(err,results)})}};async.parallel=function(tasks,callback){_parallel({map:async.map,each:async.each},tasks,callback)},async.parallelLimit=function(tasks,limit,callback){_parallel({map:_mapLimit(limit),each:_eachLimit(limit)},tasks,callback)},async.series=function(tasks,callback){if(callback=callback||function(){},tasks.constructor===Array)async.mapSeries(tasks,function(fn,callback){fn&&fn(function(err){var args=Array.prototype.slice.call(arguments,1);args.length<=1&&(args=args[0]),callback.call(null,err,args)})},callback);else{var results={};async.eachSeries(_keys(tasks),function(k,callback){tasks[k](function(err){var args=Array.prototype.slice.call(arguments,1);args.length<=1&&(args=args[0]),results[k]=args,callback(err)})},function(err){callback(err,results)})}},async.iterator=function(tasks){var makeCallback=function(index){var fn=function(){return tasks.length&&tasks[index].apply(null,arguments),fn.next()};return fn.next=function(){return index<tasks.length-1?makeCallback(index+1):null},fn};return makeCallback(0)},async.apply=function(fn){var args=Array.prototype.slice.call(arguments,1);return function(){return fn.apply(null,args.concat(Array.prototype.slice.call(arguments)))}};var _concat=function(eachfn,arr,fn,callback){var r=[];eachfn(arr,function(x,cb){fn(x,function(err,y){r=r.concat(y||[]),cb(err)})},function(err){callback(err,r)})};async.concat=doParallel(_concat),async.concatSeries=doSeries(_concat),async.whilst=function(test,iterator,callback){test()?iterator(function(err){return err?callback(err):void async.whilst(test,iterator,callback)}):callback()},async.doWhilst=function(iterator,test,callback){iterator(function(err){return err?callback(err):void(test()?async.doWhilst(iterator,test,callback):callback())})},async.until=function(test,iterator,callback){test()?callback():iterator(function(err){return err?callback(err):void async.until(test,iterator,callback)})},async.doUntil=function(iterator,test,callback){iterator(function(err){return err?callback(err):void(test()?callback():async.doUntil(iterator,test,callback))})},async.queue=function(worker,concurrency){function _insert(q,data,pos,callback){data.constructor!==Array&&(data=[data]),_each(data,function(task){var item={data:task,callback:"function"==typeof callback?callback:null};pos?q.tasks.unshift(item):q.tasks.push(item),q.saturated&&q.tasks.length===concurrency&&q.saturated(),async.setImmediate(q.process)})}void 0===concurrency&&(concurrency=1);var workers=0,q={tasks:[],concurrency:concurrency,saturated:null,empty:null,drain:null,push:function(data,callback){_insert(q,data,!1,callback)},unshift:function(data,callback){_insert(q,data,!0,callback)},process:function(){if(workers<q.concurrency&&q.tasks.length){var task=q.tasks.shift();q.empty&&0===q.tasks.length&&q.empty(),workers+=1;var next=function(){workers-=1,task.callback&&task.callback.apply(task,arguments),q.drain&&q.tasks.length+workers===0&&q.drain(),q.process()},cb=only_once(next);worker(task.data,cb)}},length:function(){return q.tasks.length},running:function(){return workers}};return q},async.cargo=function(worker,payload){var working=!1,tasks=[],cargo={tasks:tasks,payload:payload,saturated:null,empty:null,drain:null,push:function(data,callback){data.constructor!==Array&&(data=[data]),_each(data,function(task){tasks.push({data:task,callback:"function"==typeof callback?callback:null}),cargo.saturated&&tasks.length===payload&&cargo.saturated()}),async.setImmediate(cargo.process)},process:function process(){if(!working){if(0===tasks.length)return void(cargo.drain&&cargo.drain());var ts="number"==typeof payload?tasks.splice(0,payload):tasks.splice(0),ds=_map(ts,function(task){return task.data});cargo.empty&&cargo.empty(),working=!0,worker(ds,function(){working=!1;var args=arguments;_each(ts,function(data){data.callback&&data.callback.apply(null,args)}),process()})}},length:function(){return tasks.length},running:function(){return working}};return cargo};var _console_fn=function(name){return function(fn){var args=Array.prototype.slice.call(arguments,1);fn.apply(null,args.concat([function(err){var args=Array.prototype.slice.call(arguments,1);"undefined"!=typeof console&&(err?console.error&&console.error(err):console[name]&&_each(args,function(x){console[name](x)}))}]))}};async.log=_console_fn("log"),async.dir=_console_fn("dir"),async.memoize=function(fn,hasher){var memo={},queues={};hasher=hasher||function(x){return x};var memoized=function(){var args=Array.prototype.slice.call(arguments),callback=args.pop(),key=hasher.apply(null,args);key in memo?callback.apply(null,memo[key]):key in queues?queues[key].push(callback):(queues[key]=[callback],fn.apply(null,args.concat([function(){memo[key]=arguments;var q=queues[key];delete queues[key];for(var i=0,l=q.length;l>i;i++)q[i].apply(null,arguments)}])))};return memoized.memo=memo,
memoized.unmemoized=fn,memoized},async.unmemoize=function(fn){return function(){return(fn.unmemoized||fn).apply(null,arguments)}},async.times=function(count,iterator,callback){for(var counter=[],i=0;count>i;i++)counter.push(i);return async.map(counter,iterator,callback)},async.timesSeries=function(count,iterator,callback){for(var counter=[],i=0;count>i;i++)counter.push(i);return async.mapSeries(counter,iterator,callback)},async.compose=function(){var fns=Array.prototype.reverse.call(arguments);return function(){var that=this,args=Array.prototype.slice.call(arguments),callback=args.pop();async.reduce(fns,args,function(newargs,fn,cb){fn.apply(that,newargs.concat([function(){var err=arguments[0],nextargs=Array.prototype.slice.call(arguments,1);cb(err,nextargs)}]))},function(err,results){callback.apply(that,[err].concat(results))})}};var _applyEach=function(eachfn,fns){var go=function(){var that=this,args=Array.prototype.slice.call(arguments),callback=args.pop();return eachfn(fns,function(fn,cb){fn.apply(that,args.concat([cb]))},callback)};if(arguments.length>2){var args=Array.prototype.slice.call(arguments,2);return go.apply(this,args)}return go};async.applyEach=doParallel(_applyEach),async.applyEachSeries=doSeries(_applyEach),async.forever=function(fn,callback){function next(err){if(err){if(callback)return callback(err);throw err}fn(next)}next()},"undefined"!=typeof define&&define.amd?define([],function(){return async}):"undefined"!=typeof module&&module.exports?module.exports=async:root.async=async}()}).call(this,require("_process"))},{_process:20}],18:[function(require,module,exports){arguments[4][5][0].apply(exports,arguments)},{dup:5}],19:[function(require,module,exports){(function(process){function normalizeArray(parts,allowAboveRoot){for(var up=0,i=parts.length-1;i>=0;i--){var last=parts[i];"."===last?parts.splice(i,1):".."===last?(parts.splice(i,1),up++):up&&(parts.splice(i,1),up--)}if(allowAboveRoot)for(;up--;up)parts.unshift("..");return parts}function filter(xs,f){if(xs.filter)return xs.filter(f);for(var res=[],i=0;i<xs.length;i++)f(xs[i],i,xs)&&res.push(xs[i]);return res}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,splitPath=function(filename){return splitPathRe.exec(filename).slice(1)};exports.resolve=function(){for(var resolvedPath="",resolvedAbsolute=!1,i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:process.cwd();if("string"!=typeof path)throw new TypeError("Arguments to path.resolve must be strings");path&&(resolvedPath=path+"/"+resolvedPath,resolvedAbsolute="/"===path.charAt(0))}return resolvedPath=normalizeArray(filter(resolvedPath.split("/"),function(p){return!!p}),!resolvedAbsolute).join("/"),(resolvedAbsolute?"/":"")+resolvedPath||"."},exports.normalize=function(path){var isAbsolute=exports.isAbsolute(path),trailingSlash="/"===substr(path,-1);return path=normalizeArray(filter(path.split("/"),function(p){return!!p}),!isAbsolute).join("/"),path||isAbsolute||(path="."),path&&trailingSlash&&(path+="/"),(isAbsolute?"/":"")+path},exports.isAbsolute=function(path){return"/"===path.charAt(0)},exports.join=function(){var paths=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(paths,function(p,index){if("string"!=typeof p)throw new TypeError("Arguments to path.join must be strings");return p}).join("/"))},exports.relative=function(from,to){function trim(arr){for(var start=0;start<arr.length&&""===arr[start];start++);for(var end=arr.length-1;end>=0&&""===arr[end];end--);return start>end?[]:arr.slice(start,end-start+1)}from=exports.resolve(from).substr(1),to=exports.resolve(to).substr(1);for(var fromParts=trim(from.split("/")),toParts=trim(to.split("/")),length=Math.min(fromParts.length,toParts.length),samePartsLength=length,i=0;length>i;i++)if(fromParts[i]!==toParts[i]){samePartsLength=i;break}for(var outputParts=[],i=samePartsLength;i<fromParts.length;i++)outputParts.push("..");return outputParts=outputParts.concat(toParts.slice(samePartsLength)),outputParts.join("/")},exports.sep="/",exports.delimiter=":",exports.dirname=function(path){var result=splitPath(path),root=result[0],dir=result[1];return root||dir?(dir&&(dir=dir.substr(0,dir.length-1)),root+dir):"."},exports.basename=function(path,ext){var f=splitPath(path)[2];return ext&&f.substr(-1*ext.length)===ext&&(f=f.substr(0,f.length-ext.length)),f},exports.extname=function(path){return splitPath(path)[3]};var substr="b"==="ab".substr(-1)?function(str,start,len){return str.substr(start,len)}:function(str,start,len){return 0>start&&(start=str.length+start),str.substr(start,len)}}).call(this,require("_process"))},{_process:20}],20:[function(require,module,exports){function cleanUpNextTick(){draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue()}function drainQueue(){if(!draining){var timeout=setTimeout(cleanUpNextTick);draining=!0;for(var len=queue.length;len;){for(currentQueue=queue,queue=[];++queueIndex<len;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,len=queue.length}currentQueue=null,draining=!1,clearTimeout(timeout)}}function Item(fun,array){this.fun=fun,this.array=array}function noop(){}var currentQueue,process=module.exports={},queue=[],draining=!1,queueIndex=-1;process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)args[i-1]=arguments[i];queue.push(new Item(fun,args)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(name){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(dir){throw new Error("process.chdir is not supported")},process.umask=function(){return 0}},{}],21:[function(require,module,exports){module.exports=function(arg){return arg&&"object"==typeof arg&&"function"==typeof arg.copy&&"function"==typeof arg.fill&&"function"==typeof arg.readUInt8}},{}],22:[function(require,module,exports){(function(process,global){function inspect(obj,opts){var ctx={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(ctx.depth=arguments[2]),arguments.length>=4&&(ctx.colors=arguments[3]),isBoolean(opts)?ctx.showHidden=opts:opts&&exports._extend(ctx,opts),isUndefined(ctx.showHidden)&&(ctx.showHidden=!1),isUndefined(ctx.depth)&&(ctx.depth=2),isUndefined(ctx.colors)&&(ctx.colors=!1),isUndefined(ctx.customInspect)&&(ctx.customInspect=!0),ctx.colors&&(ctx.stylize=stylizeWithColor),formatValue(ctx,obj,ctx.depth)}function stylizeWithColor(str,styleType){var style=inspect.styles[styleType];return style?"["+inspect.colors[style][0]+"m"+str+"["+inspect.colors[style][1]+"m":str}function stylizeNoColor(str,styleType){return str}function arrayToHash(array){var hash={};return array.forEach(function(val,idx){hash[val]=!0}),hash}function formatValue(ctx,value,recurseTimes){if(ctx.customInspect&&value&&isFunction(value.inspect)&&value.inspect!==exports.inspect&&(!value.constructor||value.constructor.prototype!==value)){var ret=value.inspect(recurseTimes,ctx);return isString(ret)||(ret=formatValue(ctx,ret,recurseTimes)),ret}var primitive=formatPrimitive(ctx,value);if(primitive)return primitive;var keys=Object.keys(value),visibleKeys=arrayToHash(keys);if(ctx.showHidden&&(keys=Object.getOwnPropertyNames(value)),isError(value)&&(keys.indexOf("message")>=0||keys.indexOf("description")>=0))return formatError(value);if(0===keys.length){if(isFunction(value)){var name=value.name?": "+value.name:"";return ctx.stylize("[Function"+name+"]","special")}if(isRegExp(value))return ctx.stylize(RegExp.prototype.toString.call(value),"regexp");if(isDate(value))return ctx.stylize(Date.prototype.toString.call(value),"date");if(isError(value))return formatError(value)}var base="",array=!1,braces=["{","}"];if(isArray(value)&&(array=!0,braces=["[","]"]),isFunction(value)){var n=value.name?": "+value.name:"";base=" [Function"+n+"]"}if(isRegExp(value)&&(base=" "+RegExp.prototype.toString.call(value)),isDate(value)&&(base=" "+Date.prototype.toUTCString.call(value)),isError(value)&&(base=" "+formatError(value)),0===keys.length&&(!array||0==value.length))return braces[0]+base+braces[1];if(0>recurseTimes)return isRegExp(value)?ctx.stylize(RegExp.prototype.toString.call(value),"regexp"):ctx.stylize("[Object]","special");ctx.seen.push(value);var output;return output=array?formatArray(ctx,value,recurseTimes,visibleKeys,keys):keys.map(function(key){return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array)}),ctx.seen.pop(),reduceToSingleString(output,base,braces)}function formatPrimitive(ctx,value){if(isUndefined(value))return ctx.stylize("undefined","undefined");if(isString(value)){var simple="'"+JSON.stringify(value).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return ctx.stylize(simple,"string")}return isNumber(value)?ctx.stylize(""+value,"number"):isBoolean(value)?ctx.stylize(""+value,"boolean"):isNull(value)?ctx.stylize("null","null"):void 0}function formatError(value){return"["+Error.prototype.toString.call(value)+"]"}function formatArray(ctx,value,recurseTimes,visibleKeys,keys){for(var output=[],i=0,l=value.length;l>i;++i)hasOwnProperty(value,String(i))?output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),!0)):output.push("");return keys.forEach(function(key){key.match(/^\d+$/)||output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,key,!0))}),output}function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str,desc;if(desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]},desc.get?str=desc.set?ctx.stylize("[Getter/Setter]","special"):ctx.stylize("[Getter]","special"):desc.set&&(str=ctx.stylize("[Setter]","special")),hasOwnProperty(visibleKeys,key)||(name="["+key+"]"),str||(ctx.seen.indexOf(desc.value)<0?(str=isNull(recurseTimes)?formatValue(ctx,desc.value,null):formatValue(ctx,desc.value,recurseTimes-1),str.indexOf("\n")>-1&&(str=array?str.split("\n").map(function(line){return"  "+line}).join("\n").substr(2):"\n"+str.split("\n").map(function(line){return"   "+line}).join("\n"))):str=ctx.stylize("[Circular]","special")),isUndefined(name)){if(array&&key.match(/^\d+$/))return str;name=JSON.stringify(""+key),name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(name=name.substr(1,name.length-2),name=ctx.stylize(name,"name")):(name=name.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),name=ctx.stylize(name,"string"))}return name+": "+str}function reduceToSingleString(output,base,braces){var numLinesEst=0,length=output.reduce(function(prev,cur){return numLinesEst++,cur.indexOf("\n")>=0&&numLinesEst++,prev+cur.replace(/\u001b\[\d\d?m/g,"").length+1},0);return length>60?braces[0]+(""===base?"":base+"\n ")+" "+output.join(",\n  ")+" "+braces[1]:braces[0]+base+" "+output.join(", ")+" "+braces[1]}function isArray(ar){return Array.isArray(ar)}function isBoolean(arg){return"boolean"==typeof arg}function isNull(arg){return null===arg}function isNullOrUndefined(arg){return null==arg}function isNumber(arg){return"number"==typeof arg}function isString(arg){return"string"==typeof arg}function isSymbol(arg){return"symbol"==typeof arg}function isUndefined(arg){return void 0===arg}function isRegExp(re){return isObject(re)&&"[object RegExp]"===objectToString(re)}function isObject(arg){return"object"==typeof arg&&null!==arg}function isDate(d){return isObject(d)&&"[object Date]"===objectToString(d)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(arg){return"function"==typeof arg}function isPrimitive(arg){return null===arg||"boolean"==typeof arg||"number"==typeof arg||"string"==typeof arg||"symbol"==typeof arg||"undefined"==typeof arg}function objectToString(o){return Object.prototype.toString.call(o)}function pad(n){return 10>n?"0"+n.toString(10):n.toString(10)}function timestamp(){var d=new Date,time=[pad(d.getHours()),pad(d.getMinutes()),pad(d.getSeconds())].join(":");return[d.getDate(),months[d.getMonth()],time].join(" ")}function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop)}var formatRegExp=/%[sdj%]/g;exports.format=function(f){if(!isString(f)){for(var objects=[],i=0;i<arguments.length;i++)objects.push(inspect(arguments[i]));return objects.join(" ")}for(var i=1,args=arguments,len=args.length,str=String(f).replace(formatRegExp,function(x){if("%%"===x)return"%";if(i>=len)return x;switch(x){case"%s":return String(args[i++]);case"%d":return Number(args[i++]);case"%j":try{return JSON.stringify(args[i++])}catch(_){return"[Circular]"}default:return x}}),x=args[i];len>i;x=args[++i])str+=isNull(x)||!isObject(x)?" "+x:" "+inspect(x);return str},exports.deprecate=function(fn,msg){function deprecated(){if(!warned){if(process.throwDeprecation)throw new Error(msg);process.traceDeprecation?console.trace(msg):console.error(msg),warned=!0}return fn.apply(this,arguments)}if(isUndefined(global.process))return function(){return exports.deprecate(fn,msg).apply(this,arguments)};if(process.noDeprecation===!0)return fn;var warned=!1;return deprecated};var debugEnviron,debugs={};exports.debuglog=function(set){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),set=set.toUpperCase(),!debugs[set])if(new RegExp("\\b"+set+"\\b","i").test(debugEnviron)){var pid=process.pid;debugs[set]=function(){var msg=exports.format.apply(exports,arguments);console.error("%s %d: %s",set,pid,msg)}}else debugs[set]=function(){};return debugs[set]},exports.inspect=inspect,inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow","boolean":"yellow",undefined:"grey","null":"bold",string:"green",date:"magenta",regexp:"red"},exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=require("./support/isBuffer");var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];exports.log=function(){console.log("%s - %s",timestamp(),exports.format.apply(exports,arguments))},exports.inherits=require("inherits"),exports._extend=function(origin,add){if(!add||!isObject(add))return origin;for(var keys=Object.keys(add),i=keys.length;i--;)origin[keys[i]]=add[keys[i]];return origin}}).call(this,require("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./support/isBuffer":21,_process:20,inherits:6}],23:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var _index=require("../../node_modules/nedb/index.js"),_index2=_interopRequireDefault(_index),db={};db.songs=new _index2["default"]({filename:"database/caros_songs.db"}),db.artists=new _index2["default"]({filename:"database/caros_artists.db"}),db.albums=new _index2["default"]({filename:"database/caros_albums.db"}),db.songs.loadDatabase(),db.artists.loadDatabase(),db.albums.loadDatabase(),module.exports={add_music:function(data,callback){console.log("Adding: "+data.path),data.artist?!function(){var song={title:data.title,path:data.path,number:data.tracknum,duration:data.duration},artist={name:data.artist},album={title:data.album,image:data.image};db.songs.update({title:song.title},{title:song.title,path:song.path,number:data.tracknum,duration:song.duration},{upsert:!0},function(err,num,songDoc){err&&console.error(err),song._id=songDoc._id,db.artists.update({name:artist.name},{name:artist.name},{upsert:!0},function(err,num,artistDoc){err&&console.error(err),artist._id=artistDoc._id,db.albums.update({title:album.title},{title:album.title,artist:artist._id,image:album.image},{upsert:!0},function(err,num,albumDoc){err&&console.error(err),album._id=albumDoc._id,db.songs.update({_id:song._id},{title:song.title,artist:artist._id,album:album._id,path:song.path,number:data.tracknum,duration:song.duration}),db.artists.update({_id:artist._id},{$addToSet:{songs:song._id,albums:album._id}}),db.albums.update({_id:album._id},{$addToSet:{songs:song._id}}),setTimeout(function(){callback()},300)})})})}():data.title&&!data.artist&&db.songs.update({title:data.title},{title:data.title,path:data.path},{upsert:!0},function(err,num,doc){err&&console.error(err)})},get_songs:function(callback){db.songs.find({}).sort({title:1}).exec(function(err,docs){err&&console.error(err);var songs=docs.sort();db.artists.find({}).sort({name:1}).exec(function(err,docs){err&&console.error(err);var artists=docs.sort();db.albums.find({}).sort({title:1}).exec(function(err,docs){err&&console.error(err);var albums=docs.sort();callback({artists:artists,albums:albums,songs:songs})})})})},print_songs:function(){db.artists.find({},function(err,docs){err&&console.error(err),console.log(docs)}),db.albums.find({},function(err,docs){err&&console.error(err),console.log(docs)}),db.songs.find({},function(err,docs){err&&console.error(err),console.log(docs)})},print_one_song:function(title){db.songs.findOne({title:title},function(err,doc){console.log(doc)})},drop_dbs:function(){db.artists.remove({},{multi:!0}),db.albums.remove({},{multi:!0}),db.songs.remove({},{multi:!0})}}},{"../../node_modules/nedb/index.js":10}],24:[function(require,module,exports){"use strict";var musicScroller,app=(require("./database.js"),angular.module("CarOS",[]));app.controller("MainController",["$scope","$interval",function($scope,$interval){$scope.mainwindow="main-menu",$scope.windowStack=["main-menu"],$scope.time=moment().format("h:mm a"),$scope.date=moment().format("ddd - MMM Do"),$scope.yoscroll=!1,$scope.goBack=function(){$scope.windowStack.pop(),$scope.mainwindow=$scope.windowStack[$scope.windowStack.length-1]},$interval(function(){$scope.time=moment().format("h:mm a")},1e3),$interval(function(){$scope.date=moment().format("MM/dd")},432e5),$scope.navigate=function(context){$scope.mainwindow=context}}]),app.controller("MainMenu",["$scope",function($scope){}]),app.controller("Music",["$scope","$filter","$timeout","$http","MusicService",function($scope,$filter,$timeout,$http,MusicService){$scope.songs=[],$scope.artists=[],$scope.albums=[],$scope.playing=!1,$scope.active={sideBar:"",listView:"",song:""},$scope.currentArtist={artist:null,songs:[]},$http({method:"GET",url:"/demo/get_songs"}).then(function(res){$scope.artists=res.data.artists,$scope.albums=res.data.albums,$scope.songs=res.data.songs}),$scope.$watch(function(){return MusicService.currentSong},function(song){$scope.currentSong=song}),$scope.$watch(function(){return MusicService.currentAlbum},function(album){$scope.currentAlbum=album}),$scope.context="",$scope.changeContext=function(ctxt,index){$scope.context=ctxt,$scope.currentArtist={artist:null,albums:[],songs:[]},$scope.currentAlbum={},$scope.updateScroller(index)},$scope.updateScroller=function(index){var list=$(".list-view")[index];musicScroller.scrollTo(0,0,0),$timeout(function(){musicScroller.updateDimensions($(list).outerWidth(),$(list).outerHeight()+25)},100)},$scope.showAlbums=function(artist,index){$scope.currentArtist={artist:artist,songs:[],albums:[]},$scope.albums.forEach(function(a){artist.albums.forEach(function(al){a._id===al&&!function(){var newAlbum={title:a.title,image:a.image,songs:[]};a.songs.forEach(function(so){$scope.songs.forEach(function(s){so===s._id&&newAlbum.songs.push(s)})}),$scope.currentArtist.albums.push(newAlbum)}()})}),$scope.updateScroller(index)},$scope.showSongs=function(album,index){$scope.currentAlbum={title:album.title,artist:null,image:album.image,songs:[]},$scope.artists.forEach(function(a){a._id===album.artist&&($scope.currentAlbum.artist=a,$scope.currentArtist.artist=a)}),$scope.songs.forEach(function(s){album.songs.forEach(function(so){s._id===so&&$scope.currentAlbum.songs.push(s)})}),$scope.updateScroller(index)},$scope.getArtist=function(artist){var name="";return $scope.artists.forEach(function(a){a._id===artist&&(name=a.name)}),name},$scope.playSong=function(song,album){var songlist=$scope.songs;album?MusicService.playSong(song,album,$scope.currentArtist):MusicService.playSong(song,songlist,$scope.currentArtist)},$scope.queueSong=function(song){MusicService.queueSong(song)},$scope.$watch(function(){return MusicService.songlist},function(list){list.length>0?$scope.playing=!0:$scope.playing=!1,$scope.songlist=angular.copy(list)},!0)}]),app.controller("Settings",["$scope",function($scope){$scope.settings={},$scope.refreshMusic=function(){}}]),app.controller("Player",["$scope","$interval","MusicService",function($scope,$interval,MusicService){var timer=(MusicService.songlist,void 0);$scope.duration=0,$scope.playlist=[],$scope.scrubber={},$scope.scrubber.value="0",$scope.playing=!1,$scope.songlist=[],$scope.$watch(function(){return MusicService.duration},function(dur){$scope.duration=Math.round(dur),dur>1&&(timer=$interval(function(){$scope.scrubber.value=Math.floor(MusicService.player.currentTime)},1e3))},!0),$scope.$watch(function(){return MusicService.paused},function(paused){$scope.paused=paused}),$scope.$watch(function(){return MusicService.songlist},function(list){list.length>0?$scope.playing=!0:$scope.playing=!1,$scope.songlist=angular.copy(list)},!0),$scope.$watch(function(){return MusicService.currentSong},function(song){$scope.currentSong=song}),$scope.$watch(function(){return MusicService.currentArtist},function(artist){$scope.currentArtist=artist}),$scope.$watch(function(){return MusicService.currentAlbum},function(album){$scope.currentAlbum=album}),$scope.scrubberWidth=function(){return $scope.duration>1?{width:$scope.scrubber.value/$scope.duration*100+"%"}:void 0},$scope.showFullPlayer=function(){$("#player").animate({bottom:""})},$scope.seek=function(seekTo){MusicService.seek(seekTo)},$scope.playPause=function(){$scope.paused?(MusicService.play(),timer=$interval(function(){$scope.scrubber.value=Math.floor(MusicService.player.currentTime)},1e3)):(MusicService.pause(),$interval.cancel(timer))},$scope.fastForward=function(){MusicService.fastForward($scope.currentSong.number)},$scope.rewind=function(){MusicService.rewind($scope.currentSong.number)},$scope.prevSong=function(){MusicService.prevSong($scope.currentSong.number)}}]),app.factory("MusicService",function(){return{songlist:[],player:new Audio,duration:1,paused:!1,playing:!1,currentSong:{},currentArtist:{},currentAlbum:{},getDuration:function(){return this.duration},playSong:function(song,songlist,currentArtist){songlist&&(console.log(songlist),this.songlist=songlist.songs),this.currentSong=song,songlist&&songlist.image&&(this.currentAlbum=songlist),currentArtist&&(this.currentArtist=currentArtist),this.addEvent(),this.play(song.path.replace(/\#/gi,"%23")),this.playing=!0},getCurrentTime:function(){return this.player.currentTime},play:function(path){path&&(this.player.src=path),this.player.play(),this.paused=!1,this.playing=!0,setTimeout(function(){var scrollerHeight=$(musicScroller.contentContainerNode).height(),scrollerWidth=$(musicScroller.contentContainerNode).width();musicScroller.updateDimensions(scrollerWidth,scrollerHeight+100,!0)},100);var that=this;this.player.onended=function(){if(that.songlist.length>0){var index=that.songlist.indexOf(that.currentSong)+1,song=that.songlist[index];that.currentSong=song,that.player.src=song.path,that.player.play()}}},pause:function(){this.player.pause(),this.paused=!0},seek:function(seekTo){this.player.currentTime=seekTo},fastForward:function(index){var song=this.songlist[index];this.playSong(song)},rewind:function(index){var song=this.songlist[index-1];this.playSong(song)},prevSong:function(index){var song=this.songlist[index-2];this.playSong(song)},addEvent:function(){var _this=this;this.player.addEventListener("loadedmetadata",function(){_this.duration=_this.player.duration})}}}),app.filter("timecode",function(){return function(input){var min=Math.floor(input/60)<10?"0"+Math.floor(input/60):Math.floor(input/60),seconds=Math.floor(input%60)<10?"0"+Math.floor(input%60):Math.floor(input%60);return min+":"+seconds}});var scrollable=document.getElementById("music-content");musicScroller=new FTScroller(scrollable,{scrollbars:!1,scrollingX:!1})},{"./database.js":23}]},{},[24]);
//# sourceMappingURL=data:application/json;base64,
